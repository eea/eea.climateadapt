<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                      "http://www.docbook.org/xml/4.4/docbookx.dtd">
<book>
    <chapter id="implementation_guidelines">
        <title>Harvesting</title>
        <section>
            <title>Structure</title>
            <para>The harvesting capability is built around 3 areas: Javascript code, Java code and
                XSL stylesheets (on both the server and client side). </para>

            <section>
                <title>Javascript code</title>
                <para>This refers to the web interface. The code is located in the
                    web/geonetwork/scripts/harvesting folder. Here, there is a subfolder for each
                    harvesting type plus some classes for the main page. These are: </para>

                <orderedlist>
                    <listitem>
                        <para>harvester.js : This is an abstract class that must be implemented by
                            harvesting types. It defines some information retrieval methods
                            (getType, getLabel, etc...) used to handle the harvesting type, plus one
                            getUpdateRequest method used to build the XML request to insert or
                            update entries. </para>
                    </listitem>
                    <listitem>
                        <para>harvester-model.js : Another abstract class that must be implemented
                            by harvesting types. When creating the XML request, the only method
                            substituteCommon takes care of adding common information like privileges
                            and categories taken from the user interface. </para>
                    </listitem>
                    <listitem>
                        <para>harvester-view.js : This is an important abstract class that must be
                            implemented by harvesting types. It takes care of many common aspects of
                            the user interface. It provides methods to add group’s privileges, to
                            select categories, to check data for validity and to set and get common
                            data from the user interface. </para>
                    </listitem>
                    <listitem>
                        <para>harvesting.js : This is the main Javascript file that takes care of
                            everything. It starts all the submodules, loads XML strings from the
                            server and displays the main page that lists all harvesting nodes.
                        </para>
                    </listitem>
                    <listitem>
                        <para>model.js : Performs all XML requests to the server, handles errors and
                            decode responses. </para>
                    </listitem>
                    <listitem>
                        <para>view.js : Handles all updates and changes on the main page. </para>
                    </listitem>
                    <listitem>
                        <para>util.js : just a couple of utility methods.</para>
                    </listitem>
                </orderedlist>

            </section>
            <section>
                <title>Java code</title>
                <para>The harvesting package is located in src/org/fao/geonet/kernel/harvest. Here
                    too, there is one subfolder for each harvesting type. The most important classes
                    for the implementor are: </para>

                <orderedlist>
                    <listitem>
                        <para>AbstractHarvester : This is the main class that a new harvesting type
                            must extends. It takes care of all aspects like adding, updating,
                            removing, starting, stopping of harvesting nodes. Some abstract methods
                            must be implemented to properly tune the behaviour of a particular
                            harvesting type. </para>
                    </listitem>
                    <listitem>
                        <para>AbstractParams : All harvesting parameters must be enclosed in a class
                            that extends this abstract one. Doing so, all common parameters can be
                            transparently handled by this abstract class.</para>
                    </listitem>
                </orderedlist>
                <para>All others are small utility classes used by harvesting types. </para>

            </section>
            <section>
                <title>XSL stylesheets</title>
                <para>Stylesheets are spread in some foders and are used by both the Javascript code
                    and the server. The main folder is located at web/geonetwork/xsl/harvesting.
                    Here there are some general stylesheets, plus one subfolder for each harvesting
                    type. The general stylesheets are: </para>

                <orderedlist>
                    <listitem>
                        <para>buttons.xsl : Defines all button present in the main page
                                (<emphasis>activate</emphasis>, <emphasis>deactivate</emphasis>,
                                <emphasis>run</emphasis>, <emphasis>remove</emphasis>,
                                <emphasis>back</emphasis>, <emphasis>add</emphasis>,
                                <emphasis>refresh</emphasis>), buttons present in the "add new
                            harvesting" page (<emphasis>back</emphasis> and
                            <emphasis>add</emphasis>) and at the bottom of the edit page
                                (<emphasis>back</emphasis> and <emphasis>save</emphasis>). </para>
                    </listitem>
                    <listitem>
                        <para>client-error-tip.xsl : This stylesheet is used by the browser to build
                            tooltips when an harvesting error occured. It will show the error class,
                            the message and the stacktrace. </para>
                    </listitem>
                    <listitem>
                        <para>client-node-row.xsl : This is also used by the browser to add one row
                            to the list of harvesting nodes in the main page. </para>
                    </listitem>
                    <listitem>
                        <para>harvesting.xsl : This is the main stylesheet. It generates the html
                            page of the main page and includes all panels from all the harvesting
                            nodes.</para>
                    </listitem>
                </orderedlist>
                <para>In each subfolder, there are usually 4 files: </para>

                <orderedlist>
                    <listitem>
                        <para>xxx.xsl : This is the server stylesheets who builds all panels for
                            editing the parameters. XXX is the harvesting type. Usually, it has the
                            following panels: site information, search criteria, options, privileges
                            and categories. </para>
                    </listitem>
                    <listitem>
                        <para>client-privil-row.xsl : This is used by the Javascript code to add
                            rows in the group’s privileges panel. </para>
                    </listitem>
                    <listitem>
                        <para>client-result-tip.xsl : This is used by the Javascript code (which
                            inherits from harvester-view.js) to show the tooltip when the harvesting
                            has been successfull. </para>
                    </listitem>
                    <listitem>
                        <para>client-search-row.xsl : Used in some harvesting types to generate the
                            html for the search criteria panel.</para>
                    </listitem>
                </orderedlist>
                <para>As you may have guessed, all client side stylesheets (those used by Javascript
                    code) start with the prefix client-. </para>
                <para>Another set of stylesheets are located in web/geonetwork/xsl/xml/harvesting
                    and are used by the xml.harvesting.get service. This service is used by the
                    Javascript code to retrieve all the nodes the system is currently harvesting
                    from. This implies that a stylesheet (one for each harvesting type) must be
                    provided to convert from the internal setting structure to an XML structure
                    suitable to clients. </para>
                <para>The last file to take into consideration contains all localized strings and is
                    located at web/geonetwork/loc/XX/xml/harvesting.xml (where XX refers to a
                    language code). This file is used by both Javascript code and the server. </para>

            </section>
        </section>
        <section>
            <title>Data storage</title>
            <para>Harvesting nodes are stored inside the Settings table. Further useful information
                can be found in chapters ?? and ??. </para>
            <para>The SourceNames table is used to keep track of the uuid/name couple when metadata
                get migrated to different sites. </para>

        </section>
        <section>
            <title>Guidelines</title>
            <para>To add a new harvesting type, follows these steps: </para>

            <orderedlist>
                <listitem>
                    <para>Add the proper folder in web/scripts/harvesting, maybe copying an already
                        existing one. </para>
                </listitem>
                <listitem>
                    <para>Edit the harvesting.js file to include the new type (edit both constructor
                        and init methods). </para>
                </listitem>
                <listitem>
                    <para>Add the proper folder in web/xsl/harvesting (again, it is easy to copy
                        from an already existing one). </para>
                </listitem>
                <listitem>
                    <para>Edit the stylesheet web/xsl/harvesting/harvesting.xsl and add the new type
                    </para>
                </listitem>
                <listitem>
                    <para>Add the transformation stylesheet in web/xsl/xml/harvesting. Its name must
                        match the string used for the harvesting type. </para>
                </listitem>
                <listitem>
                    <para>Add the Java code in a package inside
                        org.fao.geonet.kernel.harvest.harvester. </para>
                </listitem>
                <listitem>
                    <para>Add proper strings in web/geonetwork/loc/XX/xml/harvesting.xml.</para>
                </listitem>
            </orderedlist>
            <para>Here follows a list of general notes to follow when adding a new harvesting type: </para>

            <orderedlist>
                <listitem>
                    <para>Every harvesting node (not type) must generate its UUID. This uuid is used
                        to remove metadata when the harvesting node is removed and to check if a
                        metadata (which has another uuid) has been already harvested by another
                        node. </para>
                </listitem>
                <listitem>
                    <para>If a harvesting type supports multiple searches on a remote site, these
                        must be done sequentially and results merged. </para>
                </listitem>
                <listitem>
                    <para>Every harvesting type must save in the folder images/logos a GIF image
                        whose name is the node’s uuid. This image must be deleted when the
                        harvesting node is removed. This is necessary to propagate harvesting
                        information to other GeoNetwork nodes. </para>
                </listitem>
                <listitem>
                    <para>When a harvesting node is removed, all collected metadata must be removed
                        too. </para>
                </listitem>
                <listitem>
                    <para>During harvesting, take in mind that a metadata could have been removed
                        just after being added to the result list. In this case the metadata should
                        be skipped and no exception raised. </para>
                </listitem>
                <listitem>
                    <para>The only settable privileges are: view, dynamic, featured. It does not
                        make sense to use the others. </para>
                </listitem>
                <listitem>
                    <para>If a node raises an exception during harvesting, that node will be
                        deactivated. </para>
                </listitem>
                <listitem>
                    <para>If a metadata already exists (its uuid exists) but belong to another node,
                        it must not be updated even if it has been changed. This way the harvesting
                        will not conflict with the other one. As a side effect, this prevent locally
                        created metadata from being changed. </para>
                </listitem>
                <listitem>
                    <para>The harvesting engine does not store results on disk so they will get lost
                        when the server will be restarted. </para>
                </listitem>
                <listitem>
                    <para>When some harvesting parameters are changed, the new harvesting type must
                        use them during the next harvesting without requiring to reboot the
                    server.</para>
                </listitem>
            </orderedlist>
        </section>
    </chapter>
</book>
