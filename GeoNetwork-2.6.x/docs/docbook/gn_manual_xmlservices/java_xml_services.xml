<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.docbook.org/xml/4.4/docbookx.dtd">
<book>
	<chapter id="java_xml_services">
		<title>Java development with XML services</title>
		<para>In this chapter are shown some examples to access GeoNetwork XML
    services in Java. Apache http commons library is used to send the requests
    and retrieve the results.</para>
		<section>
			<title>Retrieve groups list</title>
			<para>This example shows a simple request, without requiring
      authentication, to retrieve the GeoNetwork groups.</para>
			<section>
				<title>Source</title>
				<programlisting><?db-font-size 75% ?>
package org.geonetwork.xmlservices.client;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.StringRequestEntity;
import org.jdom.Document;
import org.jdom.Element;

public class GetGroupsClient {

    public static void main(String args[]) {

<emphasis role="bold">        // Create request xml</emphasis>
        Element request = new Element("request");
        <emphasis role="bold">
        // Create PostMethod specifying service url</emphasis>
        String serviceUrl = 
            "http://localhost:8080/geonetwork/srv/en/xml.group.list";
        PostMethod post = new PostMethod(serviceUrl);
     
        try {
            String postData = Xml.getString(new Document(request));
            
            <emphasis role="bold">// Set post data, mime-type and encoding</emphasis>
            post.setRequestEntity(new StringRequestEntity(postData, 
 "application/xml", "UTF8"));

            <emphasis role="bold">// Send request</emphasis>
            HttpClient httpclient = new HttpClient();
            int result = httpclient.executeMethod(post);

            <emphasis role="bold">// Display status code</emphasis>
            System.out.println("Response status code: " + result);

            <emphasis role="bold">// Display response</emphasis>
            System.out.println("Response body: ");
            System.out.println(post.getResponseBodyAsString());

        } catch (Exception ex) {
            ex.printStackTrace();

        } finally {
            <emphasis role="bold">// Release current connection to the connection pool
            // once you are done</emphasis>
            post.releaseConnection();        
        }
    }
} </programlisting>
			</section>
			<section>
				<title>Output</title>
				<programlisting><?db-font-size 75% ?>
Response status code: 200

Response body: 
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;response&gt;
  &lt;record&gt;
    &lt;id&gt;2&lt;/id&gt;
    &lt;name&gt;sample&lt;/name&gt;
    &lt;description&gt;Demo group&lt;/description&gt;
    &lt;email&gt;group@mail.net&lt;/email&gt;
    &lt;referrer /&gt;
    &lt;label&gt;
      &lt;en&gt;Sample group&lt;/en&gt;
      &lt;fr&gt;Sample group&lt;/fr&gt;
      &lt;es&gt;Sample group&lt;/es&gt;
      &lt;de&gt;Beispielgruppe&lt;/de&gt;
      &lt;nl&gt;Voorbeeldgroep&lt;/nl&gt;
    &lt;/label&gt;
  &lt;/record&gt;
&lt;/response&gt; </programlisting>
			</section>
		</section>
		<section>
			<title>Create a new user (exception management)</title>
			<para>This example show a request to create a new user, that requires
      authentication to complete succesfully. The request is executed without
      authentication to capture the exception returned by GeoNetwork.</para>
			<section>
				<title>Source</title>
				<programlisting><?db-font-size 75% ?>
package org.geonetwork.xmlservices.client;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.StringRequestEntity;
import org.jdom.Document;
import org.jdom.Element;


public class CreateUserClient {
    public static void main(String args[]) {

        <emphasis role="bold">// Create request</emphasis> xml
        Element request = new Element("request")
          .addContent(new Element("operation").setText("newuser"))
          .addContent(new Element("username").setText("samantha"))
          .addContent(new Element("password").setText("editor2"))
          .addContent(new Element("profile").setText("Editor"))
          .addContent(new Element("name").setText("Samantha"))
          .addContent(new Element("city").setText("Amsterdam"))
          .addContent(new Element("country").setText("Netherlands"))
          .addContent(new Element("email").setText("samantha@mail.net"));

        <emphasis role="bold">// Create PostMethod specifying service url</emphasis>
        String serviceUrl = 
            "http://localhost:8080/geonetwork/srv/en/user.update";
        PostMethod post = new PostMethod(serviceUrl);

        try {
            String postData = Xml.getString(new Document(request));

            <emphasis role="bold">// Set post data, mime-type and encoding</emphasis>
            post.setRequestEntity(new StringRequestEntity(postData, 
  "application/xml", "UTF8"));

            <emphasis role="bold">// Send request</emphasis>
            HttpClient httpclient = new HttpClient();
            int result = httpclient.executeMethod(post);

            <emphasis role="bold">// Display status code</emphasis>
            System.out.println("Response status code: " + result);

            <emphasis role="bold">// Display response</emphasis>
            System.out.println("Response body: ");
            String responseBody = post.getResponseBodyAsString();
            System.out.println(responseBody);

            if (result != HttpStatus.SC_OK) {
                <emphasis role="bold">// Process exception</emphasis>
                Element response = Xml.loadString(responseBody, false);
                System.out.println("Error code: " + 
  response.getAttribute("id").getValue());
                System.out.println("Error message: " + 
  response.getChildText("message"));
            }

        } catch (Exception ex) {
            ex.printStackTrace();

        } finally {
            // Release current connection to the connection pool
            // once you are done
            post.releaseConnection();
        }
    }
}
</programlisting>
			</section>
			<section>
				<title>Output</title>
				<para>
					<programlisting><?db-font-size 75% ?>
Response status code: 401

Response body: 
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;error id="service-not-allowed"&gt;
  &lt;message&gt;Service not allowed&lt;/message&gt;
  &lt;class&gt;ServiceNotAllowedEx&lt;/class&gt;
  &lt;stack&gt;
    &lt;at class="jeeves.server.dispatchers.ServiceManager" 
        file="ServiceManager.java" line="374" method="dispatch" /&gt;
    &lt;at class="jeeves.server.JeevesEngine" 
        file="JeevesEngine.java" line="621" method="dispatch" /&gt;
    &lt;at class="jeeves.server.sources.http.JeevesServlet" 
        file="JeevesServlet.java" line="174" method="execute" /&gt;
    &lt;at class="jeeves.server.sources.http.JeevesServlet" 
        file="JeevesServlet.java" line="99" method="doPost" /&gt;
    &lt;at class="javax.servlet.http.HttpServlet" 
        file="HttpServlet.java" line="727" method="service" /&gt;
    &lt;at class="javax.servlet.http.HttpServlet" 
        file="HttpServlet.java" line="820" method="service" /&gt;
    &lt;at class="org.mortbay.jetty.servlet.ServletHolder" 
        file="ServletHolder.java" line="502" method="handle" /&gt;
    &lt;at class="org.mortbay.jetty.servlet.ServletHandler" 
        file="ServletHandler.java" line="363" method="handle" /&gt;
    &lt;at class="org.mortbay.jetty.security.SecurityHandler" 
        file="SecurityHandler.java" line="216" method="handle" /&gt;
    &lt;at class="org.mortbay.jetty.servlet.SessionHandler" 
        file="SessionHandler.java" line="181" method="handle" /&gt;
  &lt;/stack&gt;
  &lt;object&gt;user.update&lt;/object&gt;
  &lt;request&gt;
    &lt;language&gt;en&lt;/language&gt;
    &lt;service&gt;user.update&lt;/service&gt;
  &lt;/request&gt;
&lt;/error&gt;

Error code: service-not-allowed
Error message: Service not allowed</programlisting>
				</para>
			</section>
		</section>
		<section>
			<title>Create a new user (sending credentials)</title>
			<para>This example show a request to create a new user, that requires
      authentication to complete succesfully. </para>
			<para>In this example <emphasis>httpClient</emphasis> it's used first to
      send a login request to GeoNetwork, getting with
      <emphasis>JSESSIONID</emphasis> cookie. Nexts requests send to
      GeoNetwork using <emphasis>httpClient</emphasis> send the
      <emphasis>JSESSIONID</emphasis> cookie, and are managed as authenticated
      requests.</para>
			<section>
				<title>Source</title>
				<programlisting><?db-font-size 75% ?>
package org.geonetwork.xmlservices.client;

import org.apache.commons.httpclient.Credentials;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.UsernamePasswordCredentials;
import org.apache.commons.httpclient.auth.AuthScope;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.StringRequestEntity;
import org.jdom.Document;
import org.jdom.Element;


public class CreateUserClientAuth {
    private HttpClient httpclient;

    CreateUserClientAuth() {
        httpclient = new HttpClient();
    }

    <emphasis role="bold">/**
     * Authenticates the user in GeoNetwork and send a request
     * that needs authentication to create a new user
     *
     */</emphasis>
    public void sendRequest() {
        <emphasis role="bold">// Authenticate user</emphasis>
        if (!login()) System.exit(-1);

        <emphasis role="bold">// Create request XML</emphasis>
        Element request = new Element("request")
          .addContent(new Element("operation").setText("newuser"))
          .addContent(new Element("username").setText("samantha"))
          .addContent(new Element("password").setText("editor2"))
          .addContent(new Element("profile").setText("Editor"))
          .addContent(new Element("name").setText("Samantha"))
          .addContent(new Element("city").setText("Amsterdam"))
          .addContent(new Element("country").setText("Netherlands"))
          .addContent(new Element("email").setText("samantha@mail.net"));

        <emphasis role="bold">// Create PostMethod specifying service url</emphasis>
        String serviceUrl = 
            "http://localhost:8080/geonetwork/srv/en/user.update";
        PostMethod post = new PostMethod(serviceUrl);

        try {
            String postData = Xml.getString(new Document(request));

            <emphasis role="bold">// Set post data, mime-type and encoding</emphasis>
            post.setRequestEntity(new StringRequestEntity(postData, 
  "application/xml", "UTF8"));

            <emphasis role="bold">// Send request</emphasis>
					<emphasis role="bold"> (httpClient has been set in 
            // login request with JSESSIONID cookie)</emphasis>
            int result = httpclient.executeMethod(post);

            <emphasis role="bold">// Display status code</emphasis>
            System.out.println("Create user response status code: " +
                result);

            if (result != HttpStatus.SC_OK) {
                <emphasis role="bold">// Process exception</emphasis>
                String responseBody = post.getResponseBodyAsString();
                Element response = Xml.loadString(responseBody, false);
                System.out.println("Error code: " + 
                    response.getAttribute("id").getValue());
                System.out.println("Error message: " + 
                    response.getChildText("message"));
            }

        } catch (Exception ex) {
            ex.printStackTrace();

        } finally {
            <emphasis role="bold">// Release current connection to the connection pool
            // once you are done</emphasis>
            post.releaseConnection();
        }
    }

    <emphasis role="bold">/**
     * Logins a user in GeoNetwork
     *
     * After login <emphasis role="bold">httpClient</emphasis> gets with JSSESIONID cookie. Using it
     * for nexts requests, these are managed as "authenticated requests" 
     *
     * @return  True if login it's ok, false otherwise
     */</emphasis>
    private boolean login() {
        <emphasis role="bold">// Create request XML</emphasis>
        Element request = new Element("request")
            .addContent(new Element("username").setText("admin"))
            .addContent(new Element("password").setText("admin"));

        <emphasis role="bold">// Create PostMethod specifying login service url</emphasis>
        String loginUrl = 
            "http://localhost:8080/geonetwork/srv/en/xml.user.login";
        PostMethod post = new PostMethod(loginUrl);

        try {
            String postData = Xml.getString(new Document(request));

            <emphasis role="bold">// Set post data, mime-type and encoding</emphasis>
            post.setRequestEntity(new StringRequestEntity(postData, 
  "application/xml", "UTF8"));

            <emphasis role="bold">// Send login request</emphasis>
            int result = httpclient.executeMethod(post);

            <emphasis role="bold">// Display status code and authentication session cookie</emphasis>
            System.out.println("Login response status code: " + result);
            System.out.println("Authentication session cookie: " +
                httpclient.getState().getCookies()[0]);

            return (result == HttpStatus.SC_OK);

        } catch (Exception ex) {
            ex.printStackTrace();
            return false;

        } finally {
            // Release current connection to the connection pool
            // once you are done
            post.releaseConnection();
        }

    }

    public static void main(String args[]) {
        CreateUserClientAuth request = new CreateUserClientAuth();

        request.sendRequest();
    }
} </programlisting>
			</section>
			<section>
				<title>Output</title>
				<para>
					<programlisting><?db-font-size 75% ?>
Login response status code: 200
Authentication session cookie: JSESSIONID=ozj8iyva0agv
Create user response status code: 200</programlisting><?db-font-size 75% ?>
Trying to run again the
        program, as the user it's just created we get an exception:</para>
				<programlisting><?db-font-size 75% ?>
Login response status code: 200
Authentication session cookie: JSESSIONID=1q09kwg0r6fqe
Create user response status code: 500

Error response:
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;error id="error"&gt;
  &lt;message&gt;ERROR: duplicate key violates unique constraint 
           "users_username_key"&lt;/message&gt;
  &lt;class&gt;PSQLException&lt;/class&gt;
  &lt;stack&gt;
    &lt;at class="org.postgresql.core.v3.QueryExecutorImpl" 
    file="QueryExecutorImpl.java" line="1548" 
    method="receiveErrorResponse" /&gt;
    &lt;at class="org.postgresql.core.v3.QueryExecutorImpl" 
    file="QueryExecutorImpl.java" line="1316" method="processResults" /&gt;
    &lt;at class="org.postgresql.core.v3.QueryExecutorImpl" 
    file="QueryExecutorImpl.java" line="191" method="execute" /&gt;
    &lt;at class="org.postgresql.jdbc2.AbstractJdbc2Statement" 
    file="AbstractJdbc2Statement.java" line="452" method="execute" /&gt;
    &lt;at class="org.postgresql.jdbc2.AbstractJdbc2Statement" 
    file="AbstractJdbc2Statement.java" line="351" 
    method="executeWithFlags" /&gt;
    &lt;at class="org.postgresql.jdbc2.AbstractJdbc2Statement" 
    file="AbstractJdbc2Statement.java" line="305" 
    method="executeUpdate" /&gt;
    &lt;at class="jeeves.resources.dbms.Dbms" 
    file="Dbms.java" line="261" method="execute" /&gt;
    &lt;at class="org.fao.geonet.services.user.Update" 
    file="Update.java" line="134" method="exec" /&gt;
    &lt;at class="jeeves.server.dispatchers.ServiceInfo" 
    file="ServiceInfo.java" line="238" method="execService" /&gt;
    &lt;at class="jeeves.server.dispatchers.ServiceInfo" 
    file="ServiceInfo.java" line="141" method="execServices" /&gt;
  &lt;/stack&gt;
  &lt;request&gt;
    &lt;language&gt;en&lt;/language&gt;
    &lt;service&gt;user.update&lt;/service&gt;
  &lt;/request&gt;
&lt;/error&gt;


Error code: error
Error message: ERROR: duplicate key violates unique constraint 
               "users_username_key"</programlisting>
			</section>
		</section>
	</chapter>
</book>
