<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.docbook.org/xml/4.4/docbookx.dtd">
<book>
	<chapter id="xml_services">
		<title>Calling specifications</title>
		<para>GeoNetwork provides access to several internal structures through
      the use of XML services. These are much like HTML addresses but return
      XML instead. As an example, consider the xml.info service: you can use
      this service to get some system’s information without fancy styles and
      graphics. In GeoNetwork, XML services have usually the xml. prefix in
      their address.</para>
		<section>
			<title>Request</title>
			<para>Each service accepts a set of parameters, which must be embedded
        into the request. A service can be called using different HTTP
        methods, depending on the structure of its request:</para>
			<para>GET The parameters are sent using the URL address. On the server
        side, these parameters are grouped into a flat XML document with one
        root and several simple children. A service can be called this way
        only if the parameters it accepts are not structured. <xref linkend="xml_request"/> shows an example of such request and the
        parameters encoded in XML. POST There are 3 variants of this
        method:</para>
			<para>
				<emphasis>ENCODED</emphasis> The request has one of the
        following content types:
        <literal>application/x-www-form-urlencoded</literal> or
        <literal>multipart/form-data</literal>. The first case is very common
        when sending web forms while the second one is used to send binary
        data (usually files) to the server. In these cases, the parameters are
        not structured so the rules of the GET method applies. Even if the
        second case could be used to send XML documents, this possibility is
        not considered on the server side.</para>
			<para>
				<emphasis>XML</emphasis> The content type is
        <literal>application/xml</literal>. This is the common case when the
        client is not a browser but a specialised client. The request is a
        pure XML document in string form, encoded using the encoding specified
        into the prologue of the XML document. Using this form, any type of
        request can be made (structured or not) so any service can be
        called.</para>
			<para>
				<emphasis>
					<glossterm linkend="glos-soap">SOAP</glossterm>
				</emphasis> The content type is
        <literal>application/soap+xml</literal>. SOAP is a simple protocol
        used to access objects and services using XML. Clients that use this
        protocol can embed XML requests into a SOAP structure. On the server
        side, GeoNetwork will remove the SOAP structure and feed the content
        to the service. Its response will be embedded again into a SOAP
        structure and sent back to the caller. It makes sense to use this
        protocol if it is the only protocol understood by the client.</para>
			<figure id="xml_request">
				<title>A GET request to a XML service and its request
          encoding</title>
				<programlisting>
					<?db-font-size 75% ?>&lt;request&gt; 
		&lt;hitsPerPage&gt;10&lt;/hitsPerPage&gt; 
		&lt;any /&gt; 
		&lt;/request&gt;</programlisting>
			</figure>
		</section>
		<section>
			<title>Response</title>
			<para>The response of an XML service always has a content type of
        <literal>application/xml</literal> (the only exception are those
        services which return binary data). The document encoding is the one
        specified into the document’s prologue. Anyway, all GeoNetwork
        services return documents in the UTF-8 encoding.</para>
			<para>On a GET request, the client can force a SOAP response adding
        the <literal>application/soap+xml</literal> content type to the Accept
        header parameter.</para>
		</section>
		<section>
			<title>Exception handling</title>
			<para>A response document having an error root element means that the
        XML service raised an exception. This can happen under several
        conditions: bad parameters, internal errors et cetera. In this cases
        the returned XML document has the following structure:</para>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis>error</emphasis>: This is the root element of the
            document. It has a mandatory id attribute that represents an
            identifier of the error from a common set. See <xref linkend="error_ids"/> for a list of all id values.</para>
					<itemizedlist>
						<listitem>
							<para>
								<emphasis>message</emphasis>: A message related to the
                error. It can be a short description about the error type or
                it can contain some other information that completes the id
                code.</para>
						</listitem>
						<listitem>
							<para>
								<emphasis>class</emphasis>: The Java class of the raised
                error (name without package information).</para>
						</listitem>
						<listitem>
							<para>
								<emphasis>stack</emphasis>: The server’s stacktrace up
                to the point that generated the exception. It contains several
                at children, one for each nested level. Useful for debugging
                purposes.</para>
							<itemizedlist>
								<listitem>
									<para>
										<emphasis>at</emphasis>: Information about a nested
                    level of called code. It has the following mandatory
                    attributes:</para>
									<para>
										<emphasis>class</emphasis> Java class of the called
                    method. <emphasis>method</emphasis> Java called method.
                    <emphasis>line</emphasis> Line, inside the called method’s
                    source code where there the method call of the next nested
                    level. <emphasis>file</emphasis> Source file where the
                    class is defined.</para>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<para>
								<emphasis>object</emphasis>: An optional container for
                parameters or other values that caused the exception. In case
                a parameter is an XML object, this container will contain that
                object in XML form.</para>
						</listitem>
						<listitem>
							<para>
								<emphasis>request</emphasis>: A container for some
                useful information that can be needed to debug the
                service.</para>
							<itemizedlist>
								<listitem>
									<para>
										<emphasis>language</emphasis>: Language used when
                    the service was called.</para>
								</listitem>
								<listitem>
									<para>
										<emphasis>service</emphasis>: Name of the called
                    service.</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
			<table align="left" frame="all" id="error_ids">
				<title>Summary of error ids</title>
				<tgroup cols="3">
					<colspec colname="c1" colnum="1" colwidth="1*"/>
					<colspec colname="c2" colnum="2" colwidth="1.5*"/>
					<colspec colname="c3" colnum="3" colwidth="2*"/>
					<thead>
						<row>
							<entry>
								<para>
									<emphasis>id</emphasis>
								</para>
							</entry>
							<entry>
								<para>Meaning of message element</para>
							</entry>
							<entry>
								<para>Meaning of object element</para>
							</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<para>
									<emphasis>error</emphasis>
								</para>
							</entry>
							<entry>
								<para>General message, human readable</para>
							</entry>
							<entry/>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>bad-format</emphasis>
								</para>
							</entry>
							<entry>
								<para>Reason</para>
							</entry>
							<entry>
								<para>-</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>bad-parameter</emphasis>
								</para>
							</entry>
							<entry>
								<para>Name of the parameter</para>
							</entry>
							<entry>
								<para>Parameter’s bad value</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>file-not-found</emphasis>
								</para>
							</entry>
							<entry>
								<para>-</para>
							</entry>
							<entry>
								<para>File’s name</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>file-upload-too-big</emphasis>
								</para>
							</entry>
							<entry>
								<para>-</para>
							</entry>
							<entry>
								<para>-</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>missing-parameter</emphasis>
								</para>
							</entry>
							<entry>
								<para>Name of the parameter</para>
							</entry>
							<entry>
								<para>XML container where the parameter should have
                been present.</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>object-not-found</emphasis>
								</para>
							</entry>
							<entry>
								<para>-</para>
							</entry>
							<entry>
								<para>Object’s name</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>operation-aborted</emphasis>
								</para>
							</entry>
							<entry>
								<para>Reason of abort</para>
							</entry>
							<entry>
								<para>If present, the object that caused the
                abort</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>operation-not-allowed</emphasis>
								</para>
							</entry>
							<entry>
								<para>-</para>
							</entry>
							<entry>
								<para>-</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>resource-not-found</emphasis>
								</para>
							</entry>
							<entry>
								<para>-</para>
							</entry>
							<entry>
								<para>Resource’s name</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>service-not-allowed</emphasis>
								</para>
							</entry>
							<entry>
								<para>-</para>
							</entry>
							<entry>
								<para>Service’s name</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>service-not-found</emphasis>
								</para>
							</entry>
							<entry>
								<para>-</para>
							</entry>
							<entry>
								<para>Service’s name</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>user-login</emphasis>
								</para>
							</entry>
							<entry>
								<para>User login failed message</para>
							</entry>
							<entry>
								<para>User’s name</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>user-not-found</emphasis>
								</para>
							</entry>
							<entry>
								<para>-</para>
							</entry>
							<entry>
								<para>User’s id or name</para>
							</entry>
						</row>
						<row>
							<entry>
								<para>
									<emphasis>metadata-not-found</emphasis>
								</para>
							</entry>
							<entry>
								<para>The requested metadata was not
                found</para>
							</entry>
							<entry>
								<para>Metadata’s id</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<para>
				<xref linkend="mef_export_exception"/> shows an example of
        exception generated by the mef.export service. The service complains
        about a missing parameter, as you can see from the content of the id
        attribute. The object element contains the xml request with an unknown
        test parameter while the mandatory UUID parameter (as specified by the
        message element) is missing.</para>
			<figure id="mef_export_exception">
				<title>An example of generated exception</title>
				<programlisting><?db-font-size 75% ?>
&lt;error&gt;
    &lt;message&gt;UUID&lt;/message&gt; 
    &lt;class&gt;MissingParameterEx&lt;/class&gt; 
    &lt;stack&gt; 
        &lt;at class="jeeves.utils.Util" file="Util.java" line="66" 
            method="getParam"/&gt; 
        &lt;at class="org.fao.geonet.services.mef.Export" file="Export.java" 
            line="60" method="exec"/&gt; 
        &lt;at class="jeeves.server.dispatchers.ServiceInfo" file="ServiceInfo.java" 
            line="226" method="execService"/&gt; 
        &lt;at class="jeeves.server.dispatchers.ServiceInfo" file="ServiceInfo.java" 
            line="129" method="execServices"/&gt; 
        &lt;at class="jeeves.server.dispatchers.ServiceManager" file="ServiceManager.java" 
            line="370" method="dispatch"/&gt; 
    &lt;/stack&gt; 
    &lt;object&gt; 
        &lt;request&gt; 
            &lt;asd&gt;ee&lt;/asd&gt; 
        &lt;/request&gt; 
    &lt;/object&gt; 
    &lt;request&gt; 
        &lt;language&gt;en&lt;/language&gt; 
        &lt;service&gt;mef.export&lt;/service&gt; 
    &lt;/request&gt; 
&lt;/error&gt;</programlisting>
			</figure>
		</section>
	</chapter>
</book>
