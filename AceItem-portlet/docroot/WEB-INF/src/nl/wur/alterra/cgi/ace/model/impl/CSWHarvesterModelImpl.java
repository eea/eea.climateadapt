package nl.wur.alterra.cgi.ace.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import nl.wur.alterra.cgi.ace.model.CSWHarvester;
import nl.wur.alterra.cgi.ace.model.CSWHarvesterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CSWHarvester service. Represents a row in the &quot;Ace_CSWHarvester&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link nl.wur.alterra.cgi.ace.model.CSWHarvesterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CSWHarvesterImpl}.
 * </p>
 *
 * @author groot052
 * @see CSWHarvesterImpl
 * @see nl.wur.alterra.cgi.ace.model.CSWHarvester
 * @see nl.wur.alterra.cgi.ace.model.CSWHarvesterModel
 * @generated
 */
public class CSWHarvesterModelImpl extends BaseModelImpl<CSWHarvester>
    implements CSWHarvesterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a c s w harvester model instance should use the {@link nl.wur.alterra.cgi.ace.model.CSWHarvester} interface instead.
     */
    public static final String TABLE_NAME = "Ace_CSWHarvester";
    public static final Object[][] TABLE_COLUMNS = {
            { "cswharvesterid", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "url", Types.VARCHAR },
            { "freetext", Types.VARCHAR },
            { "title", Types.VARCHAR },
            { "abstrakt", Types.VARCHAR },
            { "subject", Types.VARCHAR },
            { "every", Types.INTEGER },
            { "topic", Types.VARCHAR },
            { "status", Types.VARCHAR },
            { "savedToGeoNetwork", Types.BOOLEAN },
            { "geonetworkId", Types.BIGINT },
            { "geonetworkUUID", Types.VARCHAR },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "type_", Types.VARCHAR },
            { "username", Types.VARCHAR },
            { "password_", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Ace_CSWHarvester (cswharvesterid LONG not null primary key,name VARCHAR(75) null,url VARCHAR(75) null,freetext VARCHAR(75) null,title VARCHAR(75) null,abstrakt VARCHAR(75) null,subject VARCHAR(75) null,every INTEGER,topic VARCHAR(75) null,status VARCHAR(75) null,savedToGeoNetwork BOOLEAN,geonetworkId LONG,geonetworkUUID VARCHAR(75) null,companyId LONG,groupId LONG,type_ VARCHAR(75) null,username VARCHAR(75) null,password_ VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Ace_CSWHarvester";
    public static final String ORDER_BY_JPQL = " ORDER BY cswHarvester.name ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Ace_CSWHarvester.name ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.nl.wur.alterra.cgi.ace.model.CSWHarvester"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.nl.wur.alterra.cgi.ace.model.CSWHarvester"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.nl.wur.alterra.cgi.ace.model.CSWHarvester"),
            true);
    public static long GROUPID_COLUMN_BITMASK = 1L;
    public static long NAME_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.nl.wur.alterra.cgi.ace.model.CSWHarvester"));
    private static ClassLoader _classLoader = CSWHarvester.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            CSWHarvester.class
        };
    private long _cswharvesterid;
    private String _name;
    private String _url;
    private String _freetext;
    private String _title;
    private String _abstrakt;
    private String _subject;
    private int _every;
    private String _topic;
    private String _status;
    private boolean _savedToGeoNetwork;
    private long _geonetworkId;
    private String _geonetworkUUID;
    private long _companyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private String _type;
    private String _username;
    private String _password;
    private long _columnBitmask;
    private CSWHarvester _escapedModel;

    public CSWHarvesterModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _cswharvesterid;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setCswharvesterid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _cswharvesterid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return CSWHarvester.class;
    }

    @Override
    public String getModelClassName() {
        return CSWHarvester.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("cswharvesterid", getCswharvesterid());
        attributes.put("name", getName());
        attributes.put("url", getUrl());
        attributes.put("freetext", getFreetext());
        attributes.put("title", getTitle());
        attributes.put("abstrakt", getAbstrakt());
        attributes.put("subject", getSubject());
        attributes.put("every", getEvery());
        attributes.put("topic", getTopic());
        attributes.put("status", getStatus());
        attributes.put("savedToGeoNetwork", getSavedToGeoNetwork());
        attributes.put("geonetworkId", getGeonetworkId());
        attributes.put("geonetworkUUID", getGeonetworkUUID());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("type", getType());
        attributes.put("username", getUsername());
        attributes.put("password", getPassword());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long cswharvesterid = (Long) attributes.get("cswharvesterid");

        if (cswharvesterid != null) {
            setCswharvesterid(cswharvesterid);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String url = (String) attributes.get("url");

        if (url != null) {
            setUrl(url);
        }

        String freetext = (String) attributes.get("freetext");

        if (freetext != null) {
            setFreetext(freetext);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String abstrakt = (String) attributes.get("abstrakt");

        if (abstrakt != null) {
            setAbstrakt(abstrakt);
        }

        String subject = (String) attributes.get("subject");

        if (subject != null) {
            setSubject(subject);
        }

        Integer every = (Integer) attributes.get("every");

        if (every != null) {
            setEvery(every);
        }

        String topic = (String) attributes.get("topic");

        if (topic != null) {
            setTopic(topic);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Boolean savedToGeoNetwork = (Boolean) attributes.get(
                "savedToGeoNetwork");

        if (savedToGeoNetwork != null) {
            setSavedToGeoNetwork(savedToGeoNetwork);
        }

        Long geonetworkId = (Long) attributes.get("geonetworkId");

        if (geonetworkId != null) {
            setGeonetworkId(geonetworkId);
        }

        String geonetworkUUID = (String) attributes.get("geonetworkUUID");

        if (geonetworkUUID != null) {
            setGeonetworkUUID(geonetworkUUID);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        String type = (String) attributes.get("type");

        if (type != null) {
            setType(type);
        }

        String username = (String) attributes.get("username");

        if (username != null) {
            setUsername(username);
        }

        String password = (String) attributes.get("password");

        if (password != null) {
            setPassword(password);
        }
    }

    @Override
    public long getCswharvesterid() {
        return _cswharvesterid;
    }

    @Override
    public void setCswharvesterid(long cswharvesterid) {
        _cswharvesterid = cswharvesterid;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask = -1L;

        _name = name;
    }

    @Override
    public String getUrl() {
        if (_url == null) {
            return StringPool.BLANK;
        } else {
            return _url;
        }
    }

    @Override
    public void setUrl(String url) {
        _url = url;
    }

    @Override
    public String getFreetext() {
        if (_freetext == null) {
            return StringPool.BLANK;
        } else {
            return _freetext;
        }
    }

    @Override
    public void setFreetext(String freetext) {
        _freetext = freetext;
    }

    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @Override
    public String getAbstrakt() {
        if (_abstrakt == null) {
            return StringPool.BLANK;
        } else {
            return _abstrakt;
        }
    }

    @Override
    public void setAbstrakt(String abstrakt) {
        _abstrakt = abstrakt;
    }

    @Override
    public String getSubject() {
        if (_subject == null) {
            return StringPool.BLANK;
        } else {
            return _subject;
        }
    }

    @Override
    public void setSubject(String subject) {
        _subject = subject;
    }

    @Override
    public int getEvery() {
        return _every;
    }

    @Override
    public void setEvery(int every) {
        _every = every;
    }

    @Override
    public String getTopic() {
        if (_topic == null) {
            return StringPool.BLANK;
        } else {
            return _topic;
        }
    }

    @Override
    public void setTopic(String topic) {
        _topic = topic;
    }

    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    @Override
    public boolean getSavedToGeoNetwork() {
        return _savedToGeoNetwork;
    }

    @Override
    public boolean isSavedToGeoNetwork() {
        return _savedToGeoNetwork;
    }

    @Override
    public void setSavedToGeoNetwork(boolean savedToGeoNetwork) {
        _savedToGeoNetwork = savedToGeoNetwork;
    }

    @Override
    public long getGeonetworkId() {
        return _geonetworkId;
    }

    @Override
    public void setGeonetworkId(long geonetworkId) {
        _geonetworkId = geonetworkId;
    }

    @Override
    public String getGeonetworkUUID() {
        if (_geonetworkUUID == null) {
            return StringPool.BLANK;
        } else {
            return _geonetworkUUID;
        }
    }

    @Override
    public void setGeonetworkUUID(String geonetworkUUID) {
        _geonetworkUUID = geonetworkUUID;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public String getType() {
        if (_type == null) {
            return StringPool.BLANK;
        } else {
            return _type;
        }
    }

    @Override
    public void setType(String type) {
        _type = type;
    }

    @Override
    public String getUsername() {
        if (_username == null) {
            return StringPool.BLANK;
        } else {
            return _username;
        }
    }

    @Override
    public void setUsername(String username) {
        _username = username;
    }

    @Override
    public String getPassword() {
        if (_password == null) {
            return StringPool.BLANK;
        } else {
            return _password;
        }
    }

    @Override
    public void setPassword(String password) {
        _password = password;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            CSWHarvester.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public CSWHarvester toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CSWHarvester) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CSWHarvesterImpl cswHarvesterImpl = new CSWHarvesterImpl();

        cswHarvesterImpl.setCswharvesterid(getCswharvesterid());
        cswHarvesterImpl.setName(getName());
        cswHarvesterImpl.setUrl(getUrl());
        cswHarvesterImpl.setFreetext(getFreetext());
        cswHarvesterImpl.setTitle(getTitle());
        cswHarvesterImpl.setAbstrakt(getAbstrakt());
        cswHarvesterImpl.setSubject(getSubject());
        cswHarvesterImpl.setEvery(getEvery());
        cswHarvesterImpl.setTopic(getTopic());
        cswHarvesterImpl.setStatus(getStatus());
        cswHarvesterImpl.setSavedToGeoNetwork(getSavedToGeoNetwork());
        cswHarvesterImpl.setGeonetworkId(getGeonetworkId());
        cswHarvesterImpl.setGeonetworkUUID(getGeonetworkUUID());
        cswHarvesterImpl.setCompanyId(getCompanyId());
        cswHarvesterImpl.setGroupId(getGroupId());
        cswHarvesterImpl.setType(getType());
        cswHarvesterImpl.setUsername(getUsername());
        cswHarvesterImpl.setPassword(getPassword());

        cswHarvesterImpl.resetOriginalValues();

        return cswHarvesterImpl;
    }

    @Override
    public int compareTo(CSWHarvester cswHarvester) {
        int value = 0;

        value = getName().compareToIgnoreCase(cswHarvester.getName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CSWHarvester)) {
            return false;
        }

        CSWHarvester cswHarvester = (CSWHarvester) obj;

        long primaryKey = cswHarvester.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        CSWHarvesterModelImpl cswHarvesterModelImpl = this;

        cswHarvesterModelImpl._originalGroupId = cswHarvesterModelImpl._groupId;

        cswHarvesterModelImpl._setOriginalGroupId = false;

        cswHarvesterModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<CSWHarvester> toCacheModel() {
        CSWHarvesterCacheModel cswHarvesterCacheModel = new CSWHarvesterCacheModel();

        cswHarvesterCacheModel.cswharvesterid = getCswharvesterid();

        cswHarvesterCacheModel.name = getName();

        String name = cswHarvesterCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            cswHarvesterCacheModel.name = null;
        }

        cswHarvesterCacheModel.url = getUrl();

        String url = cswHarvesterCacheModel.url;

        if ((url != null) && (url.length() == 0)) {
            cswHarvesterCacheModel.url = null;
        }

        cswHarvesterCacheModel.freetext = getFreetext();

        String freetext = cswHarvesterCacheModel.freetext;

        if ((freetext != null) && (freetext.length() == 0)) {
            cswHarvesterCacheModel.freetext = null;
        }

        cswHarvesterCacheModel.title = getTitle();

        String title = cswHarvesterCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            cswHarvesterCacheModel.title = null;
        }

        cswHarvesterCacheModel.abstrakt = getAbstrakt();

        String abstrakt = cswHarvesterCacheModel.abstrakt;

        if ((abstrakt != null) && (abstrakt.length() == 0)) {
            cswHarvesterCacheModel.abstrakt = null;
        }

        cswHarvesterCacheModel.subject = getSubject();

        String subject = cswHarvesterCacheModel.subject;

        if ((subject != null) && (subject.length() == 0)) {
            cswHarvesterCacheModel.subject = null;
        }

        cswHarvesterCacheModel.every = getEvery();

        cswHarvesterCacheModel.topic = getTopic();

        String topic = cswHarvesterCacheModel.topic;

        if ((topic != null) && (topic.length() == 0)) {
            cswHarvesterCacheModel.topic = null;
        }

        cswHarvesterCacheModel.status = getStatus();

        String status = cswHarvesterCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            cswHarvesterCacheModel.status = null;
        }

        cswHarvesterCacheModel.savedToGeoNetwork = getSavedToGeoNetwork();

        cswHarvesterCacheModel.geonetworkId = getGeonetworkId();

        cswHarvesterCacheModel.geonetworkUUID = getGeonetworkUUID();

        String geonetworkUUID = cswHarvesterCacheModel.geonetworkUUID;

        if ((geonetworkUUID != null) && (geonetworkUUID.length() == 0)) {
            cswHarvesterCacheModel.geonetworkUUID = null;
        }

        cswHarvesterCacheModel.companyId = getCompanyId();

        cswHarvesterCacheModel.groupId = getGroupId();

        cswHarvesterCacheModel.type = getType();

        String type = cswHarvesterCacheModel.type;

        if ((type != null) && (type.length() == 0)) {
            cswHarvesterCacheModel.type = null;
        }

        cswHarvesterCacheModel.username = getUsername();

        String username = cswHarvesterCacheModel.username;

        if ((username != null) && (username.length() == 0)) {
            cswHarvesterCacheModel.username = null;
        }

        cswHarvesterCacheModel.password = getPassword();

        String password = cswHarvesterCacheModel.password;

        if ((password != null) && (password.length() == 0)) {
            cswHarvesterCacheModel.password = null;
        }

        return cswHarvesterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(37);

        sb.append("{cswharvesterid=");
        sb.append(getCswharvesterid());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", url=");
        sb.append(getUrl());
        sb.append(", freetext=");
        sb.append(getFreetext());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", abstrakt=");
        sb.append(getAbstrakt());
        sb.append(", subject=");
        sb.append(getSubject());
        sb.append(", every=");
        sb.append(getEvery());
        sb.append(", topic=");
        sb.append(getTopic());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", savedToGeoNetwork=");
        sb.append(getSavedToGeoNetwork());
        sb.append(", geonetworkId=");
        sb.append(getGeonetworkId());
        sb.append(", geonetworkUUID=");
        sb.append(getGeonetworkUUID());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", username=");
        sb.append(getUsername());
        sb.append(", password=");
        sb.append(getPassword());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(58);

        sb.append("<model><model-name>");
        sb.append("nl.wur.alterra.cgi.ace.model.CSWHarvester");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>cswharvesterid</column-name><column-value><![CDATA[");
        sb.append(getCswharvesterid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>url</column-name><column-value><![CDATA[");
        sb.append(getUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>freetext</column-name><column-value><![CDATA[");
        sb.append(getFreetext());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>abstrakt</column-name><column-value><![CDATA[");
        sb.append(getAbstrakt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subject</column-name><column-value><![CDATA[");
        sb.append(getSubject());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>every</column-name><column-value><![CDATA[");
        sb.append(getEvery());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>topic</column-name><column-value><![CDATA[");
        sb.append(getTopic());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>savedToGeoNetwork</column-name><column-value><![CDATA[");
        sb.append(getSavedToGeoNetwork());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>geonetworkId</column-name><column-value><![CDATA[");
        sb.append(getGeonetworkId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>geonetworkUUID</column-name><column-value><![CDATA[");
        sb.append(getGeonetworkUUID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>username</column-name><column-value><![CDATA[");
        sb.append(getUsername());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>password</column-name><column-value><![CDATA[");
        sb.append(getPassword());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
