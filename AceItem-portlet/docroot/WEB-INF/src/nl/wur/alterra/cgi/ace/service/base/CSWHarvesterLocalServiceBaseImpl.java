package nl.wur.alterra.cgi.ace.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.annotation.BeanReference;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.asset.service.AssetEntryLocalService;
import com.liferay.portlet.asset.service.AssetEntryService;
import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;

import nl.wur.alterra.cgi.ace.model.CSWHarvester;
import nl.wur.alterra.cgi.ace.service.AceItemLocalService;
import nl.wur.alterra.cgi.ace.service.CSWHarvesterLocalService;
import nl.wur.alterra.cgi.ace.service.WxsHarvesterLocalService;
import nl.wur.alterra.cgi.ace.service.persistence.AceItemPersistence;
import nl.wur.alterra.cgi.ace.service.persistence.CSWHarvesterPersistence;
import nl.wur.alterra.cgi.ace.service.persistence.WxsHarvesterPersistence;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the c s w harvester local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link nl.wur.alterra.cgi.ace.service.impl.CSWHarvesterLocalServiceImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. Always use {@link nl.wur.alterra.cgi.ace.service.CSWHarvesterLocalServiceUtil} to access the c s w harvester local service.
 * </p>
 *
 * @author groot052
 * @see nl.wur.alterra.cgi.ace.service.impl.CSWHarvesterLocalServiceImpl
 * @see nl.wur.alterra.cgi.ace.service.CSWHarvesterLocalServiceUtil
 * @generated
 */
public abstract class CSWHarvesterLocalServiceBaseImpl
    implements CSWHarvesterLocalService {
    @BeanReference(type = AceItemLocalService.class)
    protected AceItemLocalService aceItemLocalService;
    @BeanReference(type = AceItemPersistence.class)
    protected AceItemPersistence aceItemPersistence;
    @BeanReference(type = WxsHarvesterLocalService.class)
    protected WxsHarvesterLocalService wxsHarvesterLocalService;
    @BeanReference(type = WxsHarvesterPersistence.class)
    protected WxsHarvesterPersistence wxsHarvesterPersistence;
    @BeanReference(type = CSWHarvesterLocalService.class)
    protected CSWHarvesterLocalService cswHarvesterLocalService;
    @BeanReference(type = CSWHarvesterPersistence.class)
    protected CSWHarvesterPersistence cswHarvesterPersistence;
    @BeanReference(type = CounterLocalService.class)
    protected CounterLocalService counterLocalService;
    @BeanReference(type = ResourceLocalService.class)
    protected ResourceLocalService resourceLocalService;
    @BeanReference(type = ResourceService.class)
    protected ResourceService resourceService;
    @BeanReference(type = ResourcePersistence.class)
    protected ResourcePersistence resourcePersistence;
    @BeanReference(type = UserLocalService.class)
    protected UserLocalService userLocalService;
    @BeanReference(type = UserService.class)
    protected UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    @BeanReference(type = AssetEntryLocalService.class)
    protected AssetEntryLocalService assetEntryLocalService;
    @BeanReference(type = AssetEntryService.class)
    protected AssetEntryService assetEntryService;
    @BeanReference(type = AssetEntryPersistence.class)
    protected AssetEntryPersistence assetEntryPersistence;

    /**
     * Adds the c s w harvester to the database. Also notifies the appropriate model listeners.
     *
     * @param cswHarvester the c s w harvester to add
     * @return the c s w harvester that was added
     * @throws SystemException if a system exception occurred
     */
    public CSWHarvester addCSWHarvester(CSWHarvester cswHarvester)
        throws SystemException {
        cswHarvester.setNew(true);

        return cswHarvesterPersistence.update(cswHarvester, false);
    }

    /**
     * Creates a new c s w harvester with the primary key. Does not add the c s w harvester to the database.
     *
     * @param cswharvesterid the primary key for the new c s w harvester
     * @return the new c s w harvester
     */
    public CSWHarvester createCSWHarvester(long cswharvesterid) {
        return cswHarvesterPersistence.create(cswharvesterid);
    }

    /**
     * Deletes the c s w harvester with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param cswharvesterid the primary key of the c s w harvester to delete
     * @throws PortalException if a c s w harvester with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    public void deleteCSWHarvester(long cswharvesterid)
        throws PortalException, SystemException {
        cswHarvesterPersistence.remove(cswharvesterid);
    }

    /**
     * Deletes the c s w harvester from the database. Also notifies the appropriate model listeners.
     *
     * @param cswHarvester the c s w harvester to delete
     * @throws SystemException if a system exception occurred
     */
    public void deleteCSWHarvester(CSWHarvester cswHarvester)
        throws SystemException {
        cswHarvesterPersistence.remove(cswHarvester);
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query to search with
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return cswHarvesterPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query to search with
     * @param start the lower bound of the range of model instances to return
     * @param end the upper bound of the range of model instances to return (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return cswHarvesterPersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query to search with
     * @param start the lower bound of the range of model instances to return
     * @param end the upper bound of the range of model instances to return (not inclusive)
     * @param orderByComparator the comparator to order the results by
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return cswHarvesterPersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Counts the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query to search with
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return cswHarvesterPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Gets the c s w harvester with the primary key.
     *
     * @param cswharvesterid the primary key of the c s w harvester to get
     * @return the c s w harvester
     * @throws PortalException if a c s w harvester with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    public CSWHarvester getCSWHarvester(long cswharvesterid)
        throws PortalException, SystemException {
        return cswHarvesterPersistence.findByPrimaryKey(cswharvesterid);
    }

    /**
     * Gets a range of all the c s w harvesters.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param start the lower bound of the range of c s w harvesters to return
     * @param end the upper bound of the range of c s w harvesters to return (not inclusive)
     * @return the range of c s w harvesters
     * @throws SystemException if a system exception occurred
     */
    public List<CSWHarvester> getCSWHarvesters(int start, int end)
        throws SystemException {
        return cswHarvesterPersistence.findAll(start, end);
    }

    /**
     * Gets the number of c s w harvesters.
     *
     * @return the number of c s w harvesters
     * @throws SystemException if a system exception occurred
     */
    public int getCSWHarvestersCount() throws SystemException {
        return cswHarvesterPersistence.countAll();
    }

    /**
     * Updates the c s w harvester in the database. Also notifies the appropriate model listeners.
     *
     * @param cswHarvester the c s w harvester to update
     * @return the c s w harvester that was updated
     * @throws SystemException if a system exception occurred
     */
    public CSWHarvester updateCSWHarvester(CSWHarvester cswHarvester)
        throws SystemException {
        cswHarvester.setNew(false);

        return cswHarvesterPersistence.update(cswHarvester, true);
    }

    /**
     * Updates the c s w harvester in the database. Also notifies the appropriate model listeners.
     *
     * @param cswHarvester the c s w harvester to update
     * @param merge whether to merge the c s w harvester with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
     * @return the c s w harvester that was updated
     * @throws SystemException if a system exception occurred
     */
    public CSWHarvester updateCSWHarvester(CSWHarvester cswHarvester,
        boolean merge) throws SystemException {
        cswHarvester.setNew(false);

        return cswHarvesterPersistence.update(cswHarvester, merge);
    }

    /**
     * Gets the ace item local service.
     *
     * @return the ace item local service
     */
    public AceItemLocalService getAceItemLocalService() {
        return aceItemLocalService;
    }

    /**
     * Sets the ace item local service.
     *
     * @param aceItemLocalService the ace item local service
     */
    public void setAceItemLocalService(AceItemLocalService aceItemLocalService) {
        this.aceItemLocalService = aceItemLocalService;
    }

    /**
     * Gets the ace item persistence.
     *
     * @return the ace item persistence
     */
    public AceItemPersistence getAceItemPersistence() {
        return aceItemPersistence;
    }

    /**
     * Sets the ace item persistence.
     *
     * @param aceItemPersistence the ace item persistence
     */
    public void setAceItemPersistence(AceItemPersistence aceItemPersistence) {
        this.aceItemPersistence = aceItemPersistence;
    }

    /**
     * Gets the wxs harvester local service.
     *
     * @return the wxs harvester local service
     */
    public WxsHarvesterLocalService getWxsHarvesterLocalService() {
        return wxsHarvesterLocalService;
    }

    /**
     * Sets the wxs harvester local service.
     *
     * @param wxsHarvesterLocalService the wxs harvester local service
     */
    public void setWxsHarvesterLocalService(
        WxsHarvesterLocalService wxsHarvesterLocalService) {
        this.wxsHarvesterLocalService = wxsHarvesterLocalService;
    }

    /**
     * Gets the wxs harvester persistence.
     *
     * @return the wxs harvester persistence
     */
    public WxsHarvesterPersistence getWxsHarvesterPersistence() {
        return wxsHarvesterPersistence;
    }

    /**
     * Sets the wxs harvester persistence.
     *
     * @param wxsHarvesterPersistence the wxs harvester persistence
     */
    public void setWxsHarvesterPersistence(
        WxsHarvesterPersistence wxsHarvesterPersistence) {
        this.wxsHarvesterPersistence = wxsHarvesterPersistence;
    }

    /**
     * Gets the c s w harvester local service.
     *
     * @return the c s w harvester local service
     */
    public CSWHarvesterLocalService getCSWHarvesterLocalService() {
        return cswHarvesterLocalService;
    }

    /**
     * Sets the c s w harvester local service.
     *
     * @param cswHarvesterLocalService the c s w harvester local service
     */
    public void setCSWHarvesterLocalService(
        CSWHarvesterLocalService cswHarvesterLocalService) {
        this.cswHarvesterLocalService = cswHarvesterLocalService;
    }

    /**
     * Gets the c s w harvester persistence.
     *
     * @return the c s w harvester persistence
     */
    public CSWHarvesterPersistence getCSWHarvesterPersistence() {
        return cswHarvesterPersistence;
    }

    /**
     * Sets the c s w harvester persistence.
     *
     * @param cswHarvesterPersistence the c s w harvester persistence
     */
    public void setCSWHarvesterPersistence(
        CSWHarvesterPersistence cswHarvesterPersistence) {
        this.cswHarvesterPersistence = cswHarvesterPersistence;
    }

    /**
     * Gets the counter local service.
     *
     * @return the counter local service
     */
    public CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Gets the resource local service.
     *
     * @return the resource local service
     */
    public ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Gets the resource remote service.
     *
     * @return the resource remote service
     */
    public ResourceService getResourceService() {
        return resourceService;
    }

    /**
     * Sets the resource remote service.
     *
     * @param resourceService the resource remote service
     */
    public void setResourceService(ResourceService resourceService) {
        this.resourceService = resourceService;
    }

    /**
     * Gets the resource persistence.
     *
     * @return the resource persistence
     */
    public ResourcePersistence getResourcePersistence() {
        return resourcePersistence;
    }

    /**
     * Sets the resource persistence.
     *
     * @param resourcePersistence the resource persistence
     */
    public void setResourcePersistence(ResourcePersistence resourcePersistence) {
        this.resourcePersistence = resourcePersistence;
    }

    /**
     * Gets the user local service.
     *
     * @return the user local service
     */
    public UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Gets the user remote service.
     *
     * @return the user remote service
     */
    public UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    /**
     * Gets the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    /**
     * Gets the asset entry local service.
     *
     * @return the asset entry local service
     */
    public AssetEntryLocalService getAssetEntryLocalService() {
        return assetEntryLocalService;
    }

    /**
     * Sets the asset entry local service.
     *
     * @param assetEntryLocalService the asset entry local service
     */
    public void setAssetEntryLocalService(
        AssetEntryLocalService assetEntryLocalService) {
        this.assetEntryLocalService = assetEntryLocalService;
    }

    /**
     * Gets the asset entry remote service.
     *
     * @return the asset entry remote service
     */
    public AssetEntryService getAssetEntryService() {
        return assetEntryService;
    }

    /**
     * Sets the asset entry remote service.
     *
     * @param assetEntryService the asset entry remote service
     */
    public void setAssetEntryService(AssetEntryService assetEntryService) {
        this.assetEntryService = assetEntryService;
    }

    /**
     * Gets the asset entry persistence.
     *
     * @return the asset entry persistence
     */
    public AssetEntryPersistence getAssetEntryPersistence() {
        return assetEntryPersistence;
    }

    /**
     * Sets the asset entry persistence.
     *
     * @param assetEntryPersistence the asset entry persistence
     */
    public void setAssetEntryPersistence(
        AssetEntryPersistence assetEntryPersistence) {
        this.assetEntryPersistence = assetEntryPersistence;
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query to perform
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = cswHarvesterPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
