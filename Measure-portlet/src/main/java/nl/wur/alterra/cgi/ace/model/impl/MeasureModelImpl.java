package nl.wur.alterra.cgi.ace.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import nl.wur.alterra.cgi.ace.model.Measure;
import nl.wur.alterra.cgi.ace.model.MeasureModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Measure service. Represents a row in the &quot;Ace_Measure&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link nl.wur.alterra.cgi.ace.model.MeasureModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MeasureImpl}.
 * </p>
 *
 * @author groot052
 * @see MeasureImpl
 * @see nl.wur.alterra.cgi.ace.model.Measure
 * @see nl.wur.alterra.cgi.ace.model.MeasureModel
 * @generated
 */
public class MeasureModelImpl extends BaseModelImpl<Measure>
    implements MeasureModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a measure model instance should use the {@link nl.wur.alterra.cgi.ace.model.Measure} interface instead.
     */
    public static final String TABLE_NAME = "Ace_Measure";
    public static final Object[][] TABLE_COLUMNS = {
            { "measureId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "admincomment", Types.VARCHAR },
            { "casestudyfeature", Types.VARCHAR },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "implementationtype", Types.VARCHAR },
            { "implementationtime", Types.VARCHAR },
            { "lifetime", Types.VARCHAR },
            { "spatiallayer", Types.VARCHAR },
            { "spatialvalues", Types.VARCHAR },
            { "legalaspects", Types.VARCHAR },
            { "stakeholderparticipation", Types.VARCHAR },
            { "contact", Types.VARCHAR },
            { "objectives", Types.VARCHAR },
            { "challenges", Types.VARCHAR },
            { "adaptationoptions", Types.VARCHAR },
            { "solutions", Types.VARCHAR },
            { "relevance", Types.VARCHAR },
            { "succeslimitations", Types.VARCHAR },
            { "website", Types.VARCHAR },
            { "costbenefit", Types.VARCHAR },
            { "keywords", Types.VARCHAR },
            { "geos_", Types.VARCHAR },
            { "startdate", Types.TIMESTAMP },
            { "enddate", Types.TIMESTAMP },
            { "publicationdate", Types.TIMESTAMP },
            { "specialtagging", Types.VARCHAR },
            { "sectors_", Types.VARCHAR },
            { "elements_", Types.VARCHAR },
            { "climateimpacts_", Types.VARCHAR },
            { "mao_type", Types.VARCHAR },
            { "source", Types.VARCHAR },
            { "rating", Types.BIGINT },
            { "importance", Types.BIGINT },
            { "lon", Types.DOUBLE },
            { "lat", Types.DOUBLE },
            { "satarea", Types.VARCHAR },
            { "controlstatus", Types.INTEGER },
            { "creator", Types.VARCHAR },
            { "creationdate", Types.TIMESTAMP },
            { "moderator", Types.VARCHAR },
            { "approvaldate", Types.TIMESTAMP },
            { "replacesId", Types.BIGINT },
            { "comments", Types.VARCHAR },
            { "textwebpage", Types.VARCHAR },
            { "primephoto", Types.VARCHAR },
            { "supphotos", Types.VARCHAR },
            { "supdocs", Types.VARCHAR },
            { "year", Types.VARCHAR },
            { "geochars", Types.VARCHAR },
            { "category", Types.VARCHAR },
            { "lockdate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table Ace_Measure (measureId LONG not null primary key,companyId LONG,groupId LONG,admincomment VARCHAR(75) null,casestudyfeature VARCHAR(75) null,name VARCHAR(75) null,description VARCHAR(75) null,implementationtype VARCHAR(75) null,implementationtime VARCHAR(75) null,lifetime VARCHAR(75) null,spatiallayer VARCHAR(75) null,spatialvalues VARCHAR(75) null,legalaspects VARCHAR(75) null,stakeholderparticipation VARCHAR(75) null,contact VARCHAR(75) null,objectives VARCHAR(75) null,challenges VARCHAR(75) null,adaptationoptions VARCHAR(75) null,solutions VARCHAR(75) null,relevance VARCHAR(75) null,succeslimitations VARCHAR(75) null,website VARCHAR(75) null,costbenefit VARCHAR(75) null,keywords VARCHAR(75) null,geos_ VARCHAR(75) null,startdate DATE null,enddate DATE null,publicationdate DATE null,specialtagging VARCHAR(75) null,sectors_ VARCHAR(75) null,elements_ VARCHAR(75) null,climateimpacts_ VARCHAR(75) null,mao_type VARCHAR(75) null,source VARCHAR(75) null,rating LONG,importance LONG,lon DOUBLE,lat DOUBLE,satarea VARCHAR(75) null,controlstatus INTEGER,creator VARCHAR(75) null,creationdate DATE null,moderator VARCHAR(75) null,approvaldate DATE null,replacesId LONG,comments VARCHAR(75) null,textwebpage VARCHAR(75) null,primephoto VARCHAR(75) null,supphotos VARCHAR(75) null,supdocs VARCHAR(75) null,year VARCHAR(75) null,geochars VARCHAR(75) null,category VARCHAR(75) null,lockdate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table Ace_Measure";
    public static final String ORDER_BY_JPQL = " ORDER BY measure.name ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Ace_Measure.name ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.nl.wur.alterra.cgi.ace.model.Measure"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.nl.wur.alterra.cgi.ace.model.Measure"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.nl.wur.alterra.cgi.ace.model.Measure"),
            true);
    public static long CONTROLSTATUS_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long NAME_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.nl.wur.alterra.cgi.ace.model.Measure"));
    private static ClassLoader _classLoader = Measure.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Measure.class
        };
    private long _measureId;
    private long _companyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private String _admincomment;
    private String _casestudyfeature;
    private String _name;
    private String _description;
    private String _implementationtype;
    private String _implementationtime;
    private String _lifetime;
    private String _spatiallayer;
    private String _spatialvalues;
    private String _legalaspects;
    private String _stakeholderparticipation;
    private String _contact;
    private String _objectives;
    private String _challenges;
    private String _adaptationoptions;
    private String _solutions;
    private String _relevance;
    private String _succeslimitations;
    private String _website;
    private String _costbenefit;
    private String _keywords;
    private String _geos_;
    private Date _startdate;
    private Date _enddate;
    private Date _publicationdate;
    private String _specialtagging;
    private String _sectors_;
    private String _elements_;
    private String _climateimpacts_;
    private String _mao_type;
    private String _source;
    private long _rating;
    private long _importance;
    private double _lon;
    private double _lat;
    private String _satarea;
    private short _controlstatus;
    private short _originalControlstatus;
    private boolean _setOriginalControlstatus;
    private String _creator;
    private Date _creationdate;
    private String _moderator;
    private Date _approvaldate;
    private long _replacesId;
    private String _comments;
    private String _textwebpage;
    private String _primephoto;
    private String _supphotos;
    private String _supdocs;
    private String _year;
    private String _geochars;
    private String _category;
    private Date _lockdate;
    private long _columnBitmask;
    private Measure _escapedModel;

    public MeasureModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _measureId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setMeasureId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _measureId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Measure.class;
    }

    @Override
    public String getModelClassName() {
        return Measure.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("measureId", getMeasureId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("admincomment", getAdmincomment());
        attributes.put("casestudyfeature", getCasestudyfeature());
        attributes.put("name", getName());
        attributes.put("description", getDescription());
        attributes.put("implementationtype", getImplementationtype());
        attributes.put("implementationtime", getImplementationtime());
        attributes.put("lifetime", getLifetime());
        attributes.put("spatiallayer", getSpatiallayer());
        attributes.put("spatialvalues", getSpatialvalues());
        attributes.put("legalaspects", getLegalaspects());
        attributes.put("stakeholderparticipation", getStakeholderparticipation());
        attributes.put("contact", getContact());
        attributes.put("objectives", getObjectives());
        attributes.put("challenges", getChallenges());
        attributes.put("adaptationoptions", getAdaptationoptions());
        attributes.put("solutions", getSolutions());
        attributes.put("relevance", getRelevance());
        attributes.put("succeslimitations", getSucceslimitations());
        attributes.put("website", getWebsite());
        attributes.put("costbenefit", getCostbenefit());
        attributes.put("keywords", getKeywords());
        attributes.put("geos_", getGeos_());
        attributes.put("startdate", getStartdate());
        attributes.put("enddate", getEnddate());
        attributes.put("publicationdate", getPublicationdate());
        attributes.put("specialtagging", getSpecialtagging());
        attributes.put("sectors_", getSectors_());
        attributes.put("elements_", getElements_());
        attributes.put("climateimpacts_", getClimateimpacts_());
        attributes.put("mao_type", getMao_type());
        attributes.put("source", getSource());
        attributes.put("rating", getRating());
        attributes.put("importance", getImportance());
        attributes.put("lon", getLon());
        attributes.put("lat", getLat());
        attributes.put("satarea", getSatarea());
        attributes.put("controlstatus", getControlstatus());
        attributes.put("creator", getCreator());
        attributes.put("creationdate", getCreationdate());
        attributes.put("moderator", getModerator());
        attributes.put("approvaldate", getApprovaldate());
        attributes.put("replacesId", getReplacesId());
        attributes.put("comments", getComments());
        attributes.put("textwebpage", getTextwebpage());
        attributes.put("primephoto", getPrimephoto());
        attributes.put("supphotos", getSupphotos());
        attributes.put("supdocs", getSupdocs());
        attributes.put("year", getYear());
        attributes.put("geochars", getGeochars());
        attributes.put("category", getCategory());
        attributes.put("lockdate", getLockdate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long measureId = (Long) attributes.get("measureId");

        if (measureId != null) {
            setMeasureId(measureId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        String admincomment = (String) attributes.get("admincomment");

        if (admincomment != null) {
            setAdmincomment(admincomment);
        }

        String casestudyfeature = (String) attributes.get("casestudyfeature");

        if (casestudyfeature != null) {
            setCasestudyfeature(casestudyfeature);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String implementationtype = (String) attributes.get(
                "implementationtype");

        if (implementationtype != null) {
            setImplementationtype(implementationtype);
        }

        String implementationtime = (String) attributes.get(
                "implementationtime");

        if (implementationtime != null) {
            setImplementationtime(implementationtime);
        }

        String lifetime = (String) attributes.get("lifetime");

        if (lifetime != null) {
            setLifetime(lifetime);
        }

        String spatiallayer = (String) attributes.get("spatiallayer");

        if (spatiallayer != null) {
            setSpatiallayer(spatiallayer);
        }

        String spatialvalues = (String) attributes.get("spatialvalues");

        if (spatialvalues != null) {
            setSpatialvalues(spatialvalues);
        }

        String legalaspects = (String) attributes.get("legalaspects");

        if (legalaspects != null) {
            setLegalaspects(legalaspects);
        }

        String stakeholderparticipation = (String) attributes.get(
                "stakeholderparticipation");

        if (stakeholderparticipation != null) {
            setStakeholderparticipation(stakeholderparticipation);
        }

        String contact = (String) attributes.get("contact");

        if (contact != null) {
            setContact(contact);
        }

        String objectives = (String) attributes.get("objectives");

        if (objectives != null) {
            setObjectives(objectives);
        }

        String challenges = (String) attributes.get("challenges");

        if (challenges != null) {
            setChallenges(challenges);
        }

        String adaptationoptions = (String) attributes.get("adaptationoptions");

        if (adaptationoptions != null) {
            setAdaptationoptions(adaptationoptions);
        }

        String solutions = (String) attributes.get("solutions");

        if (solutions != null) {
            setSolutions(solutions);
        }

        String relevance = (String) attributes.get("relevance");

        if (relevance != null) {
            setRelevance(relevance);
        }

        String succeslimitations = (String) attributes.get("succeslimitations");

        if (succeslimitations != null) {
            setSucceslimitations(succeslimitations);
        }

        String website = (String) attributes.get("website");

        if (website != null) {
            setWebsite(website);
        }

        String costbenefit = (String) attributes.get("costbenefit");

        if (costbenefit != null) {
            setCostbenefit(costbenefit);
        }

        String keywords = (String) attributes.get("keywords");

        if (keywords != null) {
            setKeywords(keywords);
        }

        String geos_ = (String) attributes.get("geos_");

        if (geos_ != null) {
            setGeos_(geos_);
        }

        Date startdate = (Date) attributes.get("startdate");

        if (startdate != null) {
            setStartdate(startdate);
        }

        Date enddate = (Date) attributes.get("enddate");

        if (enddate != null) {
            setEnddate(enddate);
        }

        Date publicationdate = (Date) attributes.get("publicationdate");

        if (publicationdate != null) {
            setPublicationdate(publicationdate);
        }

        String specialtagging = (String) attributes.get("specialtagging");

        if (specialtagging != null) {
            setSpecialtagging(specialtagging);
        }

        String sectors_ = (String) attributes.get("sectors_");

        if (sectors_ != null) {
            setSectors_(sectors_);
        }

        String elements_ = (String) attributes.get("elements_");

        if (elements_ != null) {
            setElements_(elements_);
        }

        String climateimpacts_ = (String) attributes.get("climateimpacts_");

        if (climateimpacts_ != null) {
            setClimateimpacts_(climateimpacts_);
        }

        String mao_type = (String) attributes.get("mao_type");

        if (mao_type != null) {
            setMao_type(mao_type);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        Long rating = (Long) attributes.get("rating");

        if (rating != null) {
            setRating(rating);
        }

        Long importance = (Long) attributes.get("importance");

        if (importance != null) {
            setImportance(importance);
        }

        Double lon = (Double) attributes.get("lon");

        if (lon != null) {
            setLon(lon);
        }

        Double lat = (Double) attributes.get("lat");

        if (lat != null) {
            setLat(lat);
        }

        String satarea = (String) attributes.get("satarea");

        if (satarea != null) {
            setSatarea(satarea);
        }

        Short controlstatus = (Short) attributes.get("controlstatus");

        if (controlstatus != null) {
            setControlstatus(controlstatus);
        }

        String creator = (String) attributes.get("creator");

        if (creator != null) {
            setCreator(creator);
        }

        Date creationdate = (Date) attributes.get("creationdate");

        if (creationdate != null) {
            setCreationdate(creationdate);
        }

        String moderator = (String) attributes.get("moderator");

        if (moderator != null) {
            setModerator(moderator);
        }

        Date approvaldate = (Date) attributes.get("approvaldate");

        if (approvaldate != null) {
            setApprovaldate(approvaldate);
        }

        Long replacesId = (Long) attributes.get("replacesId");

        if (replacesId != null) {
            setReplacesId(replacesId);
        }

        String comments = (String) attributes.get("comments");

        if (comments != null) {
            setComments(comments);
        }

        String textwebpage = (String) attributes.get("textwebpage");

        if (textwebpage != null) {
            setTextwebpage(textwebpage);
        }

        String primephoto = (String) attributes.get("primephoto");

        if (primephoto != null) {
            setPrimephoto(primephoto);
        }

        String supphotos = (String) attributes.get("supphotos");

        if (supphotos != null) {
            setSupphotos(supphotos);
        }

        String supdocs = (String) attributes.get("supdocs");

        if (supdocs != null) {
            setSupdocs(supdocs);
        }

        String year = (String) attributes.get("year");

        if (year != null) {
            setYear(year);
        }

        String geochars = (String) attributes.get("geochars");

        if (geochars != null) {
            setGeochars(geochars);
        }

        String category = (String) attributes.get("category");

        if (category != null) {
            setCategory(category);
        }

        Date lockdate = (Date) attributes.get("lockdate");

        if (lockdate != null) {
            setLockdate(lockdate);
        }
    }

    @Override
    public long getMeasureId() {
        return _measureId;
    }

    @Override
    public void setMeasureId(long measureId) {
        _measureId = measureId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public String getAdmincomment() {
        if (_admincomment == null) {
            return StringPool.BLANK;
        } else {
            return _admincomment;
        }
    }

    @Override
    public void setAdmincomment(String admincomment) {
        _admincomment = admincomment;
    }

    @Override
    public String getCasestudyfeature() {
        if (_casestudyfeature == null) {
            return StringPool.BLANK;
        } else {
            return _casestudyfeature;
        }
    }

    @Override
    public void setCasestudyfeature(String casestudyfeature) {
        _casestudyfeature = casestudyfeature;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask = -1L;

        _name = name;
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public String getImplementationtype() {
        if (_implementationtype == null) {
            return StringPool.BLANK;
        } else {
            return _implementationtype;
        }
    }

    @Override
    public void setImplementationtype(String implementationtype) {
        _implementationtype = implementationtype;
    }

    @Override
    public String getImplementationtime() {
        if (_implementationtime == null) {
            return StringPool.BLANK;
        } else {
            return _implementationtime;
        }
    }

    @Override
    public void setImplementationtime(String implementationtime) {
        _implementationtime = implementationtime;
    }

    @Override
    public String getLifetime() {
        if (_lifetime == null) {
            return StringPool.BLANK;
        } else {
            return _lifetime;
        }
    }

    @Override
    public void setLifetime(String lifetime) {
        _lifetime = lifetime;
    }

    @Override
    public String getSpatiallayer() {
        if (_spatiallayer == null) {
            return StringPool.BLANK;
        } else {
            return _spatiallayer;
        }
    }

    @Override
    public void setSpatiallayer(String spatiallayer) {
        _spatiallayer = spatiallayer;
    }

    @Override
    public String getSpatialvalues() {
        if (_spatialvalues == null) {
            return StringPool.BLANK;
        } else {
            return _spatialvalues;
        }
    }

    @Override
    public void setSpatialvalues(String spatialvalues) {
        _spatialvalues = spatialvalues;
    }

    @Override
    public String getLegalaspects() {
        if (_legalaspects == null) {
            return StringPool.BLANK;
        } else {
            return _legalaspects;
        }
    }

    @Override
    public void setLegalaspects(String legalaspects) {
        _legalaspects = legalaspects;
    }

    @Override
    public String getStakeholderparticipation() {
        if (_stakeholderparticipation == null) {
            return StringPool.BLANK;
        } else {
            return _stakeholderparticipation;
        }
    }

    @Override
    public void setStakeholderparticipation(String stakeholderparticipation) {
        _stakeholderparticipation = stakeholderparticipation;
    }

    @Override
    public String getContact() {
        if (_contact == null) {
            return StringPool.BLANK;
        } else {
            return _contact;
        }
    }

    @Override
    public void setContact(String contact) {
        _contact = contact;
    }

    @Override
    public String getObjectives() {
        if (_objectives == null) {
            return StringPool.BLANK;
        } else {
            return _objectives;
        }
    }

    @Override
    public void setObjectives(String objectives) {
        _objectives = objectives;
    }

    @Override
    public String getChallenges() {
        if (_challenges == null) {
            return StringPool.BLANK;
        } else {
            return _challenges;
        }
    }

    @Override
    public void setChallenges(String challenges) {
        _challenges = challenges;
    }

    @Override
    public String getAdaptationoptions() {
        if (_adaptationoptions == null) {
            return StringPool.BLANK;
        } else {
            return _adaptationoptions;
        }
    }

    @Override
    public void setAdaptationoptions(String adaptationoptions) {
        _adaptationoptions = adaptationoptions;
    }

    @Override
    public String getSolutions() {
        if (_solutions == null) {
            return StringPool.BLANK;
        } else {
            return _solutions;
        }
    }

    @Override
    public void setSolutions(String solutions) {
        _solutions = solutions;
    }

    @Override
    public String getRelevance() {
        if (_relevance == null) {
            return StringPool.BLANK;
        } else {
            return _relevance;
        }
    }

    @Override
    public void setRelevance(String relevance) {
        _relevance = relevance;
    }

    @Override
    public String getSucceslimitations() {
        if (_succeslimitations == null) {
            return StringPool.BLANK;
        } else {
            return _succeslimitations;
        }
    }

    @Override
    public void setSucceslimitations(String succeslimitations) {
        _succeslimitations = succeslimitations;
    }

    @Override
    public String getWebsite() {
        if (_website == null) {
            return StringPool.BLANK;
        } else {
            return _website;
        }
    }

    @Override
    public void setWebsite(String website) {
        _website = website;
    }

    @Override
    public String getCostbenefit() {
        if (_costbenefit == null) {
            return StringPool.BLANK;
        } else {
            return _costbenefit;
        }
    }

    @Override
    public void setCostbenefit(String costbenefit) {
        _costbenefit = costbenefit;
    }

    @Override
    public String getKeywords() {
        if (_keywords == null) {
            return StringPool.BLANK;
        } else {
            return _keywords;
        }
    }

    @Override
    public void setKeywords(String keywords) {
        _keywords = keywords;
    }

    @Override
    public String getGeos_() {
        if (_geos_ == null) {
            return StringPool.BLANK;
        } else {
            return _geos_;
        }
    }

    @Override
    public void setGeos_(String geos_) {
        _geos_ = geos_;
    }

    @Override
    public Date getStartdate() {
        return _startdate;
    }

    @Override
    public void setStartdate(Date startdate) {
        _startdate = startdate;
    }

    @Override
    public Date getEnddate() {
        return _enddate;
    }

    @Override
    public void setEnddate(Date enddate) {
        _enddate = enddate;
    }

    @Override
    public Date getPublicationdate() {
        return _publicationdate;
    }

    @Override
    public void setPublicationdate(Date publicationdate) {
        _publicationdate = publicationdate;
    }

    @Override
    public String getSpecialtagging() {
        if (_specialtagging == null) {
            return StringPool.BLANK;
        } else {
            return _specialtagging;
        }
    }

    @Override
    public void setSpecialtagging(String specialtagging) {
        _specialtagging = specialtagging;
    }

    @Override
    public String getSectors_() {
        if (_sectors_ == null) {
            return StringPool.BLANK;
        } else {
            return _sectors_;
        }
    }

    @Override
    public void setSectors_(String sectors_) {
        _sectors_ = sectors_;
    }

    @Override
    public String getElements_() {
        if (_elements_ == null) {
            return StringPool.BLANK;
        } else {
            return _elements_;
        }
    }

    @Override
    public void setElements_(String elements_) {
        _elements_ = elements_;
    }

    @Override
    public String getClimateimpacts_() {
        if (_climateimpacts_ == null) {
            return StringPool.BLANK;
        } else {
            return _climateimpacts_;
        }
    }

    @Override
    public void setClimateimpacts_(String climateimpacts_) {
        _climateimpacts_ = climateimpacts_;
    }

    @Override
    public String getMao_type() {
        if (_mao_type == null) {
            return StringPool.BLANK;
        } else {
            return _mao_type;
        }
    }

    @Override
    public void setMao_type(String mao_type) {
        _mao_type = mao_type;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public long getRating() {
        return _rating;
    }

    @Override
    public void setRating(long rating) {
        _rating = rating;
    }

    @Override
    public long getImportance() {
        return _importance;
    }

    @Override
    public void setImportance(long importance) {
        _importance = importance;
    }

    @Override
    public double getLon() {
        return _lon;
    }

    @Override
    public void setLon(double lon) {
        _lon = lon;
    }

    @Override
    public double getLat() {
        return _lat;
    }

    @Override
    public void setLat(double lat) {
        _lat = lat;
    }

    @Override
    public String getSatarea() {
        if (_satarea == null) {
            return StringPool.BLANK;
        } else {
            return _satarea;
        }
    }

    @Override
    public void setSatarea(String satarea) {
        _satarea = satarea;
    }

    @Override
    public short getControlstatus() {
        return _controlstatus;
    }

    @Override
    public void setControlstatus(short controlstatus) {
        _columnBitmask |= CONTROLSTATUS_COLUMN_BITMASK;

        if (!_setOriginalControlstatus) {
            _setOriginalControlstatus = true;

            _originalControlstatus = _controlstatus;
        }

        _controlstatus = controlstatus;
    }

    public short getOriginalControlstatus() {
        return _originalControlstatus;
    }

    @Override
    public String getCreator() {
        if (_creator == null) {
            return StringPool.BLANK;
        } else {
            return _creator;
        }
    }

    @Override
    public void setCreator(String creator) {
        _creator = creator;
    }

    @Override
    public Date getCreationdate() {
        return _creationdate;
    }

    @Override
    public void setCreationdate(Date creationdate) {
        _creationdate = creationdate;
    }

    @Override
    public String getModerator() {
        if (_moderator == null) {
            return StringPool.BLANK;
        } else {
            return _moderator;
        }
    }

    @Override
    public void setModerator(String moderator) {
        _moderator = moderator;
    }

    @Override
    public Date getApprovaldate() {
        return _approvaldate;
    }

    @Override
    public void setApprovaldate(Date approvaldate) {
        _approvaldate = approvaldate;
    }

    @Override
    public long getReplacesId() {
        return _replacesId;
    }

    @Override
    public void setReplacesId(long replacesId) {
        _replacesId = replacesId;
    }

    @Override
    public String getComments() {
        if (_comments == null) {
            return StringPool.BLANK;
        } else {
            return _comments;
        }
    }

    @Override
    public void setComments(String comments) {
        _comments = comments;
    }

    @Override
    public String getTextwebpage() {
        if (_textwebpage == null) {
            return StringPool.BLANK;
        } else {
            return _textwebpage;
        }
    }

    @Override
    public void setTextwebpage(String textwebpage) {
        _textwebpage = textwebpage;
    }

    @Override
    public String getPrimephoto() {
        if (_primephoto == null) {
            return StringPool.BLANK;
        } else {
            return _primephoto;
        }
    }

    @Override
    public void setPrimephoto(String primephoto) {
        _primephoto = primephoto;
    }

    @Override
    public String getSupphotos() {
        if (_supphotos == null) {
            return StringPool.BLANK;
        } else {
            return _supphotos;
        }
    }

    @Override
    public void setSupphotos(String supphotos) {
        _supphotos = supphotos;
    }

    @Override
    public String getSupdocs() {
        if (_supdocs == null) {
            return StringPool.BLANK;
        } else {
            return _supdocs;
        }
    }

    @Override
    public void setSupdocs(String supdocs) {
        _supdocs = supdocs;
    }

    @Override
    public String getYear() {
        if (_year == null) {
            return StringPool.BLANK;
        } else {
            return _year;
        }
    }

    @Override
    public void setYear(String year) {
        _year = year;
    }

    @Override
    public String getGeochars() {
        if (_geochars == null) {
            return StringPool.BLANK;
        } else {
            return _geochars;
        }
    }

    @Override
    public void setGeochars(String geochars) {
        _geochars = geochars;
    }

    @Override
    public String getCategory() {
        if (_category == null) {
            return StringPool.BLANK;
        } else {
            return _category;
        }
    }

    @Override
    public void setCategory(String category) {
        _category = category;
    }

    @Override
    public Date getLockdate() {
        return _lockdate;
    }

    @Override
    public void setLockdate(Date lockdate) {
        _lockdate = lockdate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Measure.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Measure toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Measure) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MeasureImpl measureImpl = new MeasureImpl();

        measureImpl.setMeasureId(getMeasureId());
        measureImpl.setCompanyId(getCompanyId());
        measureImpl.setGroupId(getGroupId());
        measureImpl.setAdmincomment(getAdmincomment());
        measureImpl.setCasestudyfeature(getCasestudyfeature());
        measureImpl.setName(getName());
        measureImpl.setDescription(getDescription());
        measureImpl.setImplementationtype(getImplementationtype());
        measureImpl.setImplementationtime(getImplementationtime());
        measureImpl.setLifetime(getLifetime());
        measureImpl.setSpatiallayer(getSpatiallayer());
        measureImpl.setSpatialvalues(getSpatialvalues());
        measureImpl.setLegalaspects(getLegalaspects());
        measureImpl.setStakeholderparticipation(getStakeholderparticipation());
        measureImpl.setContact(getContact());
        measureImpl.setObjectives(getObjectives());
        measureImpl.setChallenges(getChallenges());
        measureImpl.setAdaptationoptions(getAdaptationoptions());
        measureImpl.setSolutions(getSolutions());
        measureImpl.setRelevance(getRelevance());
        measureImpl.setSucceslimitations(getSucceslimitations());
        measureImpl.setWebsite(getWebsite());
        measureImpl.setCostbenefit(getCostbenefit());
        measureImpl.setKeywords(getKeywords());
        measureImpl.setGeos_(getGeos_());
        measureImpl.setStartdate(getStartdate());
        measureImpl.setEnddate(getEnddate());
        measureImpl.setPublicationdate(getPublicationdate());
        measureImpl.setSpecialtagging(getSpecialtagging());
        measureImpl.setSectors_(getSectors_());
        measureImpl.setElements_(getElements_());
        measureImpl.setClimateimpacts_(getClimateimpacts_());
        measureImpl.setMao_type(getMao_type());
        measureImpl.setSource(getSource());
        measureImpl.setRating(getRating());
        measureImpl.setImportance(getImportance());
        measureImpl.setLon(getLon());
        measureImpl.setLat(getLat());
        measureImpl.setSatarea(getSatarea());
        measureImpl.setControlstatus(getControlstatus());
        measureImpl.setCreator(getCreator());
        measureImpl.setCreationdate(getCreationdate());
        measureImpl.setModerator(getModerator());
        measureImpl.setApprovaldate(getApprovaldate());
        measureImpl.setReplacesId(getReplacesId());
        measureImpl.setComments(getComments());
        measureImpl.setTextwebpage(getTextwebpage());
        measureImpl.setPrimephoto(getPrimephoto());
        measureImpl.setSupphotos(getSupphotos());
        measureImpl.setSupdocs(getSupdocs());
        measureImpl.setYear(getYear());
        measureImpl.setGeochars(getGeochars());
        measureImpl.setCategory(getCategory());
        measureImpl.setLockdate(getLockdate());

        measureImpl.resetOriginalValues();

        return measureImpl;
    }

    @Override
    public int compareTo(Measure measure) {
        int value = 0;

        value = getName().compareTo(measure.getName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Measure)) {
            return false;
        }

        Measure measure = (Measure) obj;

        long primaryKey = measure.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MeasureModelImpl measureModelImpl = this;

        measureModelImpl._originalGroupId = measureModelImpl._groupId;

        measureModelImpl._setOriginalGroupId = false;

        measureModelImpl._originalControlstatus = measureModelImpl._controlstatus;

        measureModelImpl._setOriginalControlstatus = false;

        measureModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Measure> toCacheModel() {
        MeasureCacheModel measureCacheModel = new MeasureCacheModel();

        measureCacheModel.measureId = getMeasureId();

        measureCacheModel.companyId = getCompanyId();

        measureCacheModel.groupId = getGroupId();

        measureCacheModel.admincomment = getAdmincomment();

        String admincomment = measureCacheModel.admincomment;

        if ((admincomment != null) && (admincomment.length() == 0)) {
            measureCacheModel.admincomment = null;
        }

        measureCacheModel.casestudyfeature = getCasestudyfeature();

        String casestudyfeature = measureCacheModel.casestudyfeature;

        if ((casestudyfeature != null) && (casestudyfeature.length() == 0)) {
            measureCacheModel.casestudyfeature = null;
        }

        measureCacheModel.name = getName();

        String name = measureCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            measureCacheModel.name = null;
        }

        measureCacheModel.description = getDescription();

        String description = measureCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            measureCacheModel.description = null;
        }

        measureCacheModel.implementationtype = getImplementationtype();

        String implementationtype = measureCacheModel.implementationtype;

        if ((implementationtype != null) && (implementationtype.length() == 0)) {
            measureCacheModel.implementationtype = null;
        }

        measureCacheModel.implementationtime = getImplementationtime();

        String implementationtime = measureCacheModel.implementationtime;

        if ((implementationtime != null) && (implementationtime.length() == 0)) {
            measureCacheModel.implementationtime = null;
        }

        measureCacheModel.lifetime = getLifetime();

        String lifetime = measureCacheModel.lifetime;

        if ((lifetime != null) && (lifetime.length() == 0)) {
            measureCacheModel.lifetime = null;
        }

        measureCacheModel.spatiallayer = getSpatiallayer();

        String spatiallayer = measureCacheModel.spatiallayer;

        if ((spatiallayer != null) && (spatiallayer.length() == 0)) {
            measureCacheModel.spatiallayer = null;
        }

        measureCacheModel.spatialvalues = getSpatialvalues();

        String spatialvalues = measureCacheModel.spatialvalues;

        if ((spatialvalues != null) && (spatialvalues.length() == 0)) {
            measureCacheModel.spatialvalues = null;
        }

        measureCacheModel.legalaspects = getLegalaspects();

        String legalaspects = measureCacheModel.legalaspects;

        if ((legalaspects != null) && (legalaspects.length() == 0)) {
            measureCacheModel.legalaspects = null;
        }

        measureCacheModel.stakeholderparticipation = getStakeholderparticipation();

        String stakeholderparticipation = measureCacheModel.stakeholderparticipation;

        if ((stakeholderparticipation != null) &&
                (stakeholderparticipation.length() == 0)) {
            measureCacheModel.stakeholderparticipation = null;
        }

        measureCacheModel.contact = getContact();

        String contact = measureCacheModel.contact;

        if ((contact != null) && (contact.length() == 0)) {
            measureCacheModel.contact = null;
        }

        measureCacheModel.objectives = getObjectives();

        String objectives = measureCacheModel.objectives;

        if ((objectives != null) && (objectives.length() == 0)) {
            measureCacheModel.objectives = null;
        }

        measureCacheModel.challenges = getChallenges();

        String challenges = measureCacheModel.challenges;

        if ((challenges != null) && (challenges.length() == 0)) {
            measureCacheModel.challenges = null;
        }

        measureCacheModel.adaptationoptions = getAdaptationoptions();

        String adaptationoptions = measureCacheModel.adaptationoptions;

        if ((adaptationoptions != null) && (adaptationoptions.length() == 0)) {
            measureCacheModel.adaptationoptions = null;
        }

        measureCacheModel.solutions = getSolutions();

        String solutions = measureCacheModel.solutions;

        if ((solutions != null) && (solutions.length() == 0)) {
            measureCacheModel.solutions = null;
        }

        measureCacheModel.relevance = getRelevance();

        String relevance = measureCacheModel.relevance;

        if ((relevance != null) && (relevance.length() == 0)) {
            measureCacheModel.relevance = null;
        }

        measureCacheModel.succeslimitations = getSucceslimitations();

        String succeslimitations = measureCacheModel.succeslimitations;

        if ((succeslimitations != null) && (succeslimitations.length() == 0)) {
            measureCacheModel.succeslimitations = null;
        }

        measureCacheModel.website = getWebsite();

        String website = measureCacheModel.website;

        if ((website != null) && (website.length() == 0)) {
            measureCacheModel.website = null;
        }

        measureCacheModel.costbenefit = getCostbenefit();

        String costbenefit = measureCacheModel.costbenefit;

        if ((costbenefit != null) && (costbenefit.length() == 0)) {
            measureCacheModel.costbenefit = null;
        }

        measureCacheModel.keywords = getKeywords();

        String keywords = measureCacheModel.keywords;

        if ((keywords != null) && (keywords.length() == 0)) {
            measureCacheModel.keywords = null;
        }

        measureCacheModel.geos_ = getGeos_();

        String geos_ = measureCacheModel.geos_;

        if ((geos_ != null) && (geos_.length() == 0)) {
            measureCacheModel.geos_ = null;
        }

        Date startdate = getStartdate();

        if (startdate != null) {
            measureCacheModel.startdate = startdate.getTime();
        } else {
            measureCacheModel.startdate = Long.MIN_VALUE;
        }

        Date enddate = getEnddate();

        if (enddate != null) {
            measureCacheModel.enddate = enddate.getTime();
        } else {
            measureCacheModel.enddate = Long.MIN_VALUE;
        }

        Date publicationdate = getPublicationdate();

        if (publicationdate != null) {
            measureCacheModel.publicationdate = publicationdate.getTime();
        } else {
            measureCacheModel.publicationdate = Long.MIN_VALUE;
        }

        measureCacheModel.specialtagging = getSpecialtagging();

        String specialtagging = measureCacheModel.specialtagging;

        if ((specialtagging != null) && (specialtagging.length() == 0)) {
            measureCacheModel.specialtagging = null;
        }

        measureCacheModel.sectors_ = getSectors_();

        String sectors_ = measureCacheModel.sectors_;

        if ((sectors_ != null) && (sectors_.length() == 0)) {
            measureCacheModel.sectors_ = null;
        }

        measureCacheModel.elements_ = getElements_();

        String elements_ = measureCacheModel.elements_;

        if ((elements_ != null) && (elements_.length() == 0)) {
            measureCacheModel.elements_ = null;
        }

        measureCacheModel.climateimpacts_ = getClimateimpacts_();

        String climateimpacts_ = measureCacheModel.climateimpacts_;

        if ((climateimpacts_ != null) && (climateimpacts_.length() == 0)) {
            measureCacheModel.climateimpacts_ = null;
        }

        measureCacheModel.mao_type = getMao_type();

        String mao_type = measureCacheModel.mao_type;

        if ((mao_type != null) && (mao_type.length() == 0)) {
            measureCacheModel.mao_type = null;
        }

        measureCacheModel.source = getSource();

        String source = measureCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            measureCacheModel.source = null;
        }

        measureCacheModel.rating = getRating();

        measureCacheModel.importance = getImportance();

        measureCacheModel.lon = getLon();

        measureCacheModel.lat = getLat();

        measureCacheModel.satarea = getSatarea();

        String satarea = measureCacheModel.satarea;

        if ((satarea != null) && (satarea.length() == 0)) {
            measureCacheModel.satarea = null;
        }

        measureCacheModel.controlstatus = getControlstatus();

        measureCacheModel.creator = getCreator();

        String creator = measureCacheModel.creator;

        if ((creator != null) && (creator.length() == 0)) {
            measureCacheModel.creator = null;
        }

        Date creationdate = getCreationdate();

        if (creationdate != null) {
            measureCacheModel.creationdate = creationdate.getTime();
        } else {
            measureCacheModel.creationdate = Long.MIN_VALUE;
        }

        measureCacheModel.moderator = getModerator();

        String moderator = measureCacheModel.moderator;

        if ((moderator != null) && (moderator.length() == 0)) {
            measureCacheModel.moderator = null;
        }

        Date approvaldate = getApprovaldate();

        if (approvaldate != null) {
            measureCacheModel.approvaldate = approvaldate.getTime();
        } else {
            measureCacheModel.approvaldate = Long.MIN_VALUE;
        }

        measureCacheModel.replacesId = getReplacesId();

        measureCacheModel.comments = getComments();

        String comments = measureCacheModel.comments;

        if ((comments != null) && (comments.length() == 0)) {
            measureCacheModel.comments = null;
        }

        measureCacheModel.textwebpage = getTextwebpage();

        String textwebpage = measureCacheModel.textwebpage;

        if ((textwebpage != null) && (textwebpage.length() == 0)) {
            measureCacheModel.textwebpage = null;
        }

        measureCacheModel.primephoto = getPrimephoto();

        String primephoto = measureCacheModel.primephoto;

        if ((primephoto != null) && (primephoto.length() == 0)) {
            measureCacheModel.primephoto = null;
        }

        measureCacheModel.supphotos = getSupphotos();

        String supphotos = measureCacheModel.supphotos;

        if ((supphotos != null) && (supphotos.length() == 0)) {
            measureCacheModel.supphotos = null;
        }

        measureCacheModel.supdocs = getSupdocs();

        String supdocs = measureCacheModel.supdocs;

        if ((supdocs != null) && (supdocs.length() == 0)) {
            measureCacheModel.supdocs = null;
        }

        measureCacheModel.year = getYear();

        String year = measureCacheModel.year;

        if ((year != null) && (year.length() == 0)) {
            measureCacheModel.year = null;
        }

        measureCacheModel.geochars = getGeochars();

        String geochars = measureCacheModel.geochars;

        if ((geochars != null) && (geochars.length() == 0)) {
            measureCacheModel.geochars = null;
        }

        measureCacheModel.category = getCategory();

        String category = measureCacheModel.category;

        if ((category != null) && (category.length() == 0)) {
            measureCacheModel.category = null;
        }

        Date lockdate = getLockdate();

        if (lockdate != null) {
            measureCacheModel.lockdate = lockdate.getTime();
        } else {
            measureCacheModel.lockdate = Long.MIN_VALUE;
        }

        return measureCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(109);

        sb.append("{measureId=");
        sb.append(getMeasureId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", admincomment=");
        sb.append(getAdmincomment());
        sb.append(", casestudyfeature=");
        sb.append(getCasestudyfeature());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", implementationtype=");
        sb.append(getImplementationtype());
        sb.append(", implementationtime=");
        sb.append(getImplementationtime());
        sb.append(", lifetime=");
        sb.append(getLifetime());
        sb.append(", spatiallayer=");
        sb.append(getSpatiallayer());
        sb.append(", spatialvalues=");
        sb.append(getSpatialvalues());
        sb.append(", legalaspects=");
        sb.append(getLegalaspects());
        sb.append(", stakeholderparticipation=");
        sb.append(getStakeholderparticipation());
        sb.append(", contact=");
        sb.append(getContact());
        sb.append(", objectives=");
        sb.append(getObjectives());
        sb.append(", challenges=");
        sb.append(getChallenges());
        sb.append(", adaptationoptions=");
        sb.append(getAdaptationoptions());
        sb.append(", solutions=");
        sb.append(getSolutions());
        sb.append(", relevance=");
        sb.append(getRelevance());
        sb.append(", succeslimitations=");
        sb.append(getSucceslimitations());
        sb.append(", website=");
        sb.append(getWebsite());
        sb.append(", costbenefit=");
        sb.append(getCostbenefit());
        sb.append(", keywords=");
        sb.append(getKeywords());
        sb.append(", geos_=");
        sb.append(getGeos_());
        sb.append(", startdate=");
        sb.append(getStartdate());
        sb.append(", enddate=");
        sb.append(getEnddate());
        sb.append(", publicationdate=");
        sb.append(getPublicationdate());
        sb.append(", specialtagging=");
        sb.append(getSpecialtagging());
        sb.append(", sectors_=");
        sb.append(getSectors_());
        sb.append(", elements_=");
        sb.append(getElements_());
        sb.append(", climateimpacts_=");
        sb.append(getClimateimpacts_());
        sb.append(", mao_type=");
        sb.append(getMao_type());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", rating=");
        sb.append(getRating());
        sb.append(", importance=");
        sb.append(getImportance());
        sb.append(", lon=");
        sb.append(getLon());
        sb.append(", lat=");
        sb.append(getLat());
        sb.append(", satarea=");
        sb.append(getSatarea());
        sb.append(", controlstatus=");
        sb.append(getControlstatus());
        sb.append(", creator=");
        sb.append(getCreator());
        sb.append(", creationdate=");
        sb.append(getCreationdate());
        sb.append(", moderator=");
        sb.append(getModerator());
        sb.append(", approvaldate=");
        sb.append(getApprovaldate());
        sb.append(", replacesId=");
        sb.append(getReplacesId());
        sb.append(", comments=");
        sb.append(getComments());
        sb.append(", textwebpage=");
        sb.append(getTextwebpage());
        sb.append(", primephoto=");
        sb.append(getPrimephoto());
        sb.append(", supphotos=");
        sb.append(getSupphotos());
        sb.append(", supdocs=");
        sb.append(getSupdocs());
        sb.append(", year=");
        sb.append(getYear());
        sb.append(", geochars=");
        sb.append(getGeochars());
        sb.append(", category=");
        sb.append(getCategory());
        sb.append(", lockdate=");
        sb.append(getLockdate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(166);

        sb.append("<model><model-name>");
        sb.append("nl.wur.alterra.cgi.ace.model.Measure");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>measureId</column-name><column-value><![CDATA[");
        sb.append(getMeasureId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>admincomment</column-name><column-value><![CDATA[");
        sb.append(getAdmincomment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>casestudyfeature</column-name><column-value><![CDATA[");
        sb.append(getCasestudyfeature());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>implementationtype</column-name><column-value><![CDATA[");
        sb.append(getImplementationtype());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>implementationtime</column-name><column-value><![CDATA[");
        sb.append(getImplementationtime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lifetime</column-name><column-value><![CDATA[");
        sb.append(getLifetime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>spatiallayer</column-name><column-value><![CDATA[");
        sb.append(getSpatiallayer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>spatialvalues</column-name><column-value><![CDATA[");
        sb.append(getSpatialvalues());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>legalaspects</column-name><column-value><![CDATA[");
        sb.append(getLegalaspects());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stakeholderparticipation</column-name><column-value><![CDATA[");
        sb.append(getStakeholderparticipation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contact</column-name><column-value><![CDATA[");
        sb.append(getContact());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>objectives</column-name><column-value><![CDATA[");
        sb.append(getObjectives());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>challenges</column-name><column-value><![CDATA[");
        sb.append(getChallenges());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>adaptationoptions</column-name><column-value><![CDATA[");
        sb.append(getAdaptationoptions());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>solutions</column-name><column-value><![CDATA[");
        sb.append(getSolutions());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>relevance</column-name><column-value><![CDATA[");
        sb.append(getRelevance());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>succeslimitations</column-name><column-value><![CDATA[");
        sb.append(getSucceslimitations());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>website</column-name><column-value><![CDATA[");
        sb.append(getWebsite());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>costbenefit</column-name><column-value><![CDATA[");
        sb.append(getCostbenefit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>keywords</column-name><column-value><![CDATA[");
        sb.append(getKeywords());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>geos_</column-name><column-value><![CDATA[");
        sb.append(getGeos_());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startdate</column-name><column-value><![CDATA[");
        sb.append(getStartdate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>enddate</column-name><column-value><![CDATA[");
        sb.append(getEnddate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>publicationdate</column-name><column-value><![CDATA[");
        sb.append(getPublicationdate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>specialtagging</column-name><column-value><![CDATA[");
        sb.append(getSpecialtagging());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectors_</column-name><column-value><![CDATA[");
        sb.append(getSectors_());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>elements_</column-name><column-value><![CDATA[");
        sb.append(getElements_());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>climateimpacts_</column-name><column-value><![CDATA[");
        sb.append(getClimateimpacts_());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mao_type</column-name><column-value><![CDATA[");
        sb.append(getMao_type());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rating</column-name><column-value><![CDATA[");
        sb.append(getRating());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>importance</column-name><column-value><![CDATA[");
        sb.append(getImportance());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lon</column-name><column-value><![CDATA[");
        sb.append(getLon());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lat</column-name><column-value><![CDATA[");
        sb.append(getLat());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>satarea</column-name><column-value><![CDATA[");
        sb.append(getSatarea());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>controlstatus</column-name><column-value><![CDATA[");
        sb.append(getControlstatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creator</column-name><column-value><![CDATA[");
        sb.append(getCreator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creationdate</column-name><column-value><![CDATA[");
        sb.append(getCreationdate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>moderator</column-name><column-value><![CDATA[");
        sb.append(getModerator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>approvaldate</column-name><column-value><![CDATA[");
        sb.append(getApprovaldate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>replacesId</column-name><column-value><![CDATA[");
        sb.append(getReplacesId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>comments</column-name><column-value><![CDATA[");
        sb.append(getComments());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>textwebpage</column-name><column-value><![CDATA[");
        sb.append(getTextwebpage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>primephoto</column-name><column-value><![CDATA[");
        sb.append(getPrimephoto());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>supphotos</column-name><column-value><![CDATA[");
        sb.append(getSupphotos());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>supdocs</column-name><column-value><![CDATA[");
        sb.append(getSupdocs());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>year</column-name><column-value><![CDATA[");
        sb.append(getYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>geochars</column-name><column-value><![CDATA[");
        sb.append(getGeochars());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>category</column-name><column-value><![CDATA[");
        sb.append(getCategory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lockdate</column-name><column-value><![CDATA[");
        sb.append(getLockdate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
