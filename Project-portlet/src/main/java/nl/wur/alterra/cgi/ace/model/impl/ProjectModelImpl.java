package nl.wur.alterra.cgi.ace.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import nl.wur.alterra.cgi.ace.model.Project;
import nl.wur.alterra.cgi.ace.model.ProjectModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Project service. Represents a row in the &quot;Ace_Project&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link nl.wur.alterra.cgi.ace.model.ProjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectImpl}.
 * </p>
 *
 * @author Groot052
 * @see ProjectImpl
 * @see nl.wur.alterra.cgi.ace.model.Project
 * @see nl.wur.alterra.cgi.ace.model.ProjectModel
 * @generated
 */
public class ProjectModelImpl extends BaseModelImpl<Project>
    implements ProjectModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a project model instance should use the {@link nl.wur.alterra.cgi.ace.model.Project} interface instead.
     */
    public static final String TABLE_NAME = "Ace_Project";
    public static final Object[][] TABLE_COLUMNS = {
            { "projectId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "admincomment", Types.VARCHAR },
            { "acronym", Types.VARCHAR },
            { "title", Types.VARCHAR },
            { "startdate", Types.TIMESTAMP },
            { "enddate", Types.TIMESTAMP },
            { "lead", Types.VARCHAR },
            { "partners", Types.VARCHAR },
            { "funding", Types.VARCHAR },
            { "sectors", Types.VARCHAR },
            { "spatiallayer", Types.VARCHAR },
            { "abstracts", Types.VARCHAR },
            { "element", Types.VARCHAR },
            { "keywords", Types.VARCHAR },
            { "website", Types.VARCHAR },
            { "duration", Types.VARCHAR },
            { "rating", Types.BIGINT },
            { "importance", Types.BIGINT },
            { "specialtagging", Types.VARCHAR },
            { "controlstatus", Types.INTEGER },
            { "creator", Types.VARCHAR },
            { "creationdate", Types.TIMESTAMP },
            { "moderator", Types.VARCHAR },
            { "approvaldate", Types.TIMESTAMP },
            { "replacesId", Types.BIGINT },
            { "comments", Types.VARCHAR },
            { "textwebpage", Types.VARCHAR },
            { "spatialvalues", Types.VARCHAR },
            { "source", Types.VARCHAR },
            { "climateimpacts", Types.VARCHAR },
            { "lockdate", Types.TIMESTAMP },
            { "feature", Types.VARCHAR },
            { "supdocs", Types.VARCHAR },
            { "geochars", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Ace_Project (projectId LONG not null primary key,companyId LONG,groupId LONG,admincomment VARCHAR(75) null,acronym VARCHAR(75) null,title VARCHAR(75) null,startdate DATE null,enddate DATE null,lead VARCHAR(75) null,partners VARCHAR(75) null,funding VARCHAR(75) null,sectors VARCHAR(75) null,spatiallayer VARCHAR(75) null,abstracts VARCHAR(75) null,element VARCHAR(75) null,keywords VARCHAR(75) null,website VARCHAR(75) null,duration VARCHAR(75) null,rating LONG,importance LONG,specialtagging VARCHAR(75) null,controlstatus INTEGER,creator VARCHAR(75) null,creationdate DATE null,moderator VARCHAR(75) null,approvaldate DATE null,replacesId LONG,comments VARCHAR(75) null,textwebpage VARCHAR(75) null,spatialvalues VARCHAR(75) null,source VARCHAR(75) null,climateimpacts VARCHAR(75) null,lockdate DATE null,feature VARCHAR(75) null,supdocs VARCHAR(75) null,geochars VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Ace_Project";
    public static final String ORDER_BY_JPQL = " ORDER BY project.acronym ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Ace_Project.acronym ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.nl.wur.alterra.cgi.ace.model.Project"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.nl.wur.alterra.cgi.ace.model.Project"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.nl.wur.alterra.cgi.ace.model.Project"),
            true);
    public static long CONTROLSTATUS_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long ACRONYM_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.nl.wur.alterra.cgi.ace.model.Project"));
    private static ClassLoader _classLoader = Project.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Project.class
        };
    private long _projectId;
    private long _companyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private String _admincomment;
    private String _acronym;
    private String _title;
    private Date _startdate;
    private Date _enddate;
    private String _lead;
    private String _partners;
    private String _funding;
    private String _sectors;
    private String _spatiallayer;
    private String _abstracts;
    private String _element;
    private String _keywords;
    private String _website;
    private String _duration;
    private long _rating;
    private long _importance;
    private String _specialtagging;
    private short _controlstatus;
    private short _originalControlstatus;
    private boolean _setOriginalControlstatus;
    private String _creator;
    private Date _creationdate;
    private String _moderator;
    private Date _approvaldate;
    private long _replacesId;
    private String _comments;
    private String _textwebpage;
    private String _spatialvalues;
    private String _source;
    private String _climateimpacts;
    private Date _lockdate;
    private String _feature;
    private String _supdocs;
    private String _geochars;
    private long _columnBitmask;
    private Project _escapedModel;

    public ProjectModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _projectId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setProjectId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _projectId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Project.class;
    }

    @Override
    public String getModelClassName() {
        return Project.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("projectId", getProjectId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("admincomment", getAdmincomment());
        attributes.put("acronym", getAcronym());
        attributes.put("title", getTitle());
        attributes.put("startdate", getStartdate());
        attributes.put("enddate", getEnddate());
        attributes.put("lead", getLead());
        attributes.put("partners", getPartners());
        attributes.put("funding", getFunding());
        attributes.put("sectors", getSectors());
        attributes.put("spatiallayer", getSpatiallayer());
        attributes.put("abstracts", getAbstracts());
        attributes.put("element", getElement());
        attributes.put("keywords", getKeywords());
        attributes.put("website", getWebsite());
        attributes.put("duration", getDuration());
        attributes.put("rating", getRating());
        attributes.put("importance", getImportance());
        attributes.put("specialtagging", getSpecialtagging());
        attributes.put("controlstatus", getControlstatus());
        attributes.put("creator", getCreator());
        attributes.put("creationdate", getCreationdate());
        attributes.put("moderator", getModerator());
        attributes.put("approvaldate", getApprovaldate());
        attributes.put("replacesId", getReplacesId());
        attributes.put("comments", getComments());
        attributes.put("textwebpage", getTextwebpage());
        attributes.put("spatialvalues", getSpatialvalues());
        attributes.put("source", getSource());
        attributes.put("climateimpacts", getClimateimpacts());
        attributes.put("lockdate", getLockdate());
        attributes.put("feature", getFeature());
        attributes.put("supdocs", getSupdocs());
        attributes.put("geochars", getGeochars());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long projectId = (Long) attributes.get("projectId");

        if (projectId != null) {
            setProjectId(projectId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        String admincomment = (String) attributes.get("admincomment");

        if (admincomment != null) {
            setAdmincomment(admincomment);
        }

        String acronym = (String) attributes.get("acronym");

        if (acronym != null) {
            setAcronym(acronym);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        Date startdate = (Date) attributes.get("startdate");

        if (startdate != null) {
            setStartdate(startdate);
        }

        Date enddate = (Date) attributes.get("enddate");

        if (enddate != null) {
            setEnddate(enddate);
        }

        String lead = (String) attributes.get("lead");

        if (lead != null) {
            setLead(lead);
        }

        String partners = (String) attributes.get("partners");

        if (partners != null) {
            setPartners(partners);
        }

        String funding = (String) attributes.get("funding");

        if (funding != null) {
            setFunding(funding);
        }

        String sectors = (String) attributes.get("sectors");

        if (sectors != null) {
            setSectors(sectors);
        }

        String spatiallayer = (String) attributes.get("spatiallayer");

        if (spatiallayer != null) {
            setSpatiallayer(spatiallayer);
        }

        String abstracts = (String) attributes.get("abstracts");

        if (abstracts != null) {
            setAbstracts(abstracts);
        }

        String element = (String) attributes.get("element");

        if (element != null) {
            setElement(element);
        }

        String keywords = (String) attributes.get("keywords");

        if (keywords != null) {
            setKeywords(keywords);
        }

        String website = (String) attributes.get("website");

        if (website != null) {
            setWebsite(website);
        }

        String duration = (String) attributes.get("duration");

        if (duration != null) {
            setDuration(duration);
        }

        Long rating = (Long) attributes.get("rating");

        if (rating != null) {
            setRating(rating);
        }

        Long importance = (Long) attributes.get("importance");

        if (importance != null) {
            setImportance(importance);
        }

        String specialtagging = (String) attributes.get("specialtagging");

        if (specialtagging != null) {
            setSpecialtagging(specialtagging);
        }

        Short controlstatus = (Short) attributes.get("controlstatus");

        if (controlstatus != null) {
            setControlstatus(controlstatus);
        }

        String creator = (String) attributes.get("creator");

        if (creator != null) {
            setCreator(creator);
        }

        Date creationdate = (Date) attributes.get("creationdate");

        if (creationdate != null) {
            setCreationdate(creationdate);
        }

        String moderator = (String) attributes.get("moderator");

        if (moderator != null) {
            setModerator(moderator);
        }

        Date approvaldate = (Date) attributes.get("approvaldate");

        if (approvaldate != null) {
            setApprovaldate(approvaldate);
        }

        Long replacesId = (Long) attributes.get("replacesId");

        if (replacesId != null) {
            setReplacesId(replacesId);
        }

        String comments = (String) attributes.get("comments");

        if (comments != null) {
            setComments(comments);
        }

        String textwebpage = (String) attributes.get("textwebpage");

        if (textwebpage != null) {
            setTextwebpage(textwebpage);
        }

        String spatialvalues = (String) attributes.get("spatialvalues");

        if (spatialvalues != null) {
            setSpatialvalues(spatialvalues);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String climateimpacts = (String) attributes.get("climateimpacts");

        if (climateimpacts != null) {
            setClimateimpacts(climateimpacts);
        }

        Date lockdate = (Date) attributes.get("lockdate");

        if (lockdate != null) {
            setLockdate(lockdate);
        }

        String feature = (String) attributes.get("feature");

        if (feature != null) {
            setFeature(feature);
        }

        String supdocs = (String) attributes.get("supdocs");

        if (supdocs != null) {
            setSupdocs(supdocs);
        }

        String geochars = (String) attributes.get("geochars");

        if (geochars != null) {
            setGeochars(geochars);
        }
    }

    @Override
    public long getProjectId() {
        return _projectId;
    }

    @Override
    public void setProjectId(long projectId) {
        _projectId = projectId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public String getAdmincomment() {
        if (_admincomment == null) {
            return StringPool.BLANK;
        } else {
            return _admincomment;
        }
    }

    @Override
    public void setAdmincomment(String admincomment) {
        _admincomment = admincomment;
    }

    @Override
    public String getAcronym() {
        if (_acronym == null) {
            return StringPool.BLANK;
        } else {
            return _acronym;
        }
    }

    @Override
    public void setAcronym(String acronym) {
        _columnBitmask = -1L;

        _acronym = acronym;
    }

    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @Override
    public Date getStartdate() {
        return _startdate;
    }

    @Override
    public void setStartdate(Date startdate) {
        _startdate = startdate;
    }

    @Override
    public Date getEnddate() {
        return _enddate;
    }

    @Override
    public void setEnddate(Date enddate) {
        _enddate = enddate;
    }

    @Override
    public String getLead() {
        if (_lead == null) {
            return StringPool.BLANK;
        } else {
            return _lead;
        }
    }

    @Override
    public void setLead(String lead) {
        _lead = lead;
    }

    @Override
    public String getPartners() {
        if (_partners == null) {
            return StringPool.BLANK;
        } else {
            return _partners;
        }
    }

    @Override
    public void setPartners(String partners) {
        _partners = partners;
    }

    @Override
    public String getFunding() {
        if (_funding == null) {
            return StringPool.BLANK;
        } else {
            return _funding;
        }
    }

    @Override
    public void setFunding(String funding) {
        _funding = funding;
    }

    @Override
    public String getSectors() {
        if (_sectors == null) {
            return StringPool.BLANK;
        } else {
            return _sectors;
        }
    }

    @Override
    public void setSectors(String sectors) {
        _sectors = sectors;
    }

    @Override
    public String getSpatiallayer() {
        if (_spatiallayer == null) {
            return StringPool.BLANK;
        } else {
            return _spatiallayer;
        }
    }

    @Override
    public void setSpatiallayer(String spatiallayer) {
        _spatiallayer = spatiallayer;
    }

    @Override
    public String getAbstracts() {
        if (_abstracts == null) {
            return StringPool.BLANK;
        } else {
            return _abstracts;
        }
    }

    @Override
    public void setAbstracts(String abstracts) {
        _abstracts = abstracts;
    }

    @Override
    public String getElement() {
        if (_element == null) {
            return StringPool.BLANK;
        } else {
            return _element;
        }
    }

    @Override
    public void setElement(String element) {
        _element = element;
    }

    @Override
    public String getKeywords() {
        if (_keywords == null) {
            return StringPool.BLANK;
        } else {
            return _keywords;
        }
    }

    @Override
    public void setKeywords(String keywords) {
        _keywords = keywords;
    }

    @Override
    public String getWebsite() {
        if (_website == null) {
            return StringPool.BLANK;
        } else {
            return _website;
        }
    }

    @Override
    public void setWebsite(String website) {
        _website = website;
    }

    @Override
    public String getDuration() {
        if (_duration == null) {
            return StringPool.BLANK;
        } else {
            return _duration;
        }
    }

    @Override
    public void setDuration(String duration) {
        _duration = duration;
    }

    @Override
    public long getRating() {
        return _rating;
    }

    @Override
    public void setRating(long rating) {
        _rating = rating;
    }

    @Override
    public long getImportance() {
        return _importance;
    }

    @Override
    public void setImportance(long importance) {
        _importance = importance;
    }

    @Override
    public String getSpecialtagging() {
        if (_specialtagging == null) {
            return StringPool.BLANK;
        } else {
            return _specialtagging;
        }
    }

    @Override
    public void setSpecialtagging(String specialtagging) {
        _specialtagging = specialtagging;
    }

    @Override
    public short getControlstatus() {
        return _controlstatus;
    }

    @Override
    public void setControlstatus(short controlstatus) {
        _columnBitmask |= CONTROLSTATUS_COLUMN_BITMASK;

        if (!_setOriginalControlstatus) {
            _setOriginalControlstatus = true;

            _originalControlstatus = _controlstatus;
        }

        _controlstatus = controlstatus;
    }

    public short getOriginalControlstatus() {
        return _originalControlstatus;
    }

    @Override
    public String getCreator() {
        if (_creator == null) {
            return StringPool.BLANK;
        } else {
            return _creator;
        }
    }

    @Override
    public void setCreator(String creator) {
        _creator = creator;
    }

    @Override
    public Date getCreationdate() {
        return _creationdate;
    }

    @Override
    public void setCreationdate(Date creationdate) {
        _creationdate = creationdate;
    }

    @Override
    public String getModerator() {
        if (_moderator == null) {
            return StringPool.BLANK;
        } else {
            return _moderator;
        }
    }

    @Override
    public void setModerator(String moderator) {
        _moderator = moderator;
    }

    @Override
    public Date getApprovaldate() {
        return _approvaldate;
    }

    @Override
    public void setApprovaldate(Date approvaldate) {
        _approvaldate = approvaldate;
    }

    @Override
    public long getReplacesId() {
        return _replacesId;
    }

    @Override
    public void setReplacesId(long replacesId) {
        _replacesId = replacesId;
    }

    @Override
    public String getComments() {
        if (_comments == null) {
            return StringPool.BLANK;
        } else {
            return _comments;
        }
    }

    @Override
    public void setComments(String comments) {
        _comments = comments;
    }

    @Override
    public String getTextwebpage() {
        if (_textwebpage == null) {
            return StringPool.BLANK;
        } else {
            return _textwebpage;
        }
    }

    @Override
    public void setTextwebpage(String textwebpage) {
        _textwebpage = textwebpage;
    }

    @Override
    public String getSpatialvalues() {
        if (_spatialvalues == null) {
            return StringPool.BLANK;
        } else {
            return _spatialvalues;
        }
    }

    @Override
    public void setSpatialvalues(String spatialvalues) {
        _spatialvalues = spatialvalues;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getClimateimpacts() {
        if (_climateimpacts == null) {
            return StringPool.BLANK;
        } else {
            return _climateimpacts;
        }
    }

    @Override
    public void setClimateimpacts(String climateimpacts) {
        _climateimpacts = climateimpacts;
    }

    @Override
    public Date getLockdate() {
        return _lockdate;
    }

    @Override
    public void setLockdate(Date lockdate) {
        _lockdate = lockdate;
    }

    @Override
    public String getFeature() {
        if (_feature == null) {
            return StringPool.BLANK;
        } else {
            return _feature;
        }
    }

    @Override
    public void setFeature(String feature) {
        _feature = feature;
    }

    @Override
    public String getSupdocs() {
        if (_supdocs == null) {
            return StringPool.BLANK;
        } else {
            return _supdocs;
        }
    }

    @Override
    public void setSupdocs(String supdocs) {
        _supdocs = supdocs;
    }

    @Override
    public String getGeochars() {
        if (_geochars == null) {
            return StringPool.BLANK;
        } else {
            return _geochars;
        }
    }

    @Override
    public void setGeochars(String geochars) {
        _geochars = geochars;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Project.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Project toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Project) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ProjectImpl projectImpl = new ProjectImpl();

        projectImpl.setProjectId(getProjectId());
        projectImpl.setCompanyId(getCompanyId());
        projectImpl.setGroupId(getGroupId());
        projectImpl.setAdmincomment(getAdmincomment());
        projectImpl.setAcronym(getAcronym());
        projectImpl.setTitle(getTitle());
        projectImpl.setStartdate(getStartdate());
        projectImpl.setEnddate(getEnddate());
        projectImpl.setLead(getLead());
        projectImpl.setPartners(getPartners());
        projectImpl.setFunding(getFunding());
        projectImpl.setSectors(getSectors());
        projectImpl.setSpatiallayer(getSpatiallayer());
        projectImpl.setAbstracts(getAbstracts());
        projectImpl.setElement(getElement());
        projectImpl.setKeywords(getKeywords());
        projectImpl.setWebsite(getWebsite());
        projectImpl.setDuration(getDuration());
        projectImpl.setRating(getRating());
        projectImpl.setImportance(getImportance());
        projectImpl.setSpecialtagging(getSpecialtagging());
        projectImpl.setControlstatus(getControlstatus());
        projectImpl.setCreator(getCreator());
        projectImpl.setCreationdate(getCreationdate());
        projectImpl.setModerator(getModerator());
        projectImpl.setApprovaldate(getApprovaldate());
        projectImpl.setReplacesId(getReplacesId());
        projectImpl.setComments(getComments());
        projectImpl.setTextwebpage(getTextwebpage());
        projectImpl.setSpatialvalues(getSpatialvalues());
        projectImpl.setSource(getSource());
        projectImpl.setClimateimpacts(getClimateimpacts());
        projectImpl.setLockdate(getLockdate());
        projectImpl.setFeature(getFeature());
        projectImpl.setSupdocs(getSupdocs());
        projectImpl.setGeochars(getGeochars());

        projectImpl.resetOriginalValues();

        return projectImpl;
    }

    @Override
    public int compareTo(Project project) {
        int value = 0;

        value = getAcronym().compareTo(project.getAcronym());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Project)) {
            return false;
        }

        Project project = (Project) obj;

        long primaryKey = project.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ProjectModelImpl projectModelImpl = this;

        projectModelImpl._originalGroupId = projectModelImpl._groupId;

        projectModelImpl._setOriginalGroupId = false;

        projectModelImpl._originalControlstatus = projectModelImpl._controlstatus;

        projectModelImpl._setOriginalControlstatus = false;

        projectModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Project> toCacheModel() {
        ProjectCacheModel projectCacheModel = new ProjectCacheModel();

        projectCacheModel.projectId = getProjectId();

        projectCacheModel.companyId = getCompanyId();

        projectCacheModel.groupId = getGroupId();

        projectCacheModel.admincomment = getAdmincomment();

        String admincomment = projectCacheModel.admincomment;

        if ((admincomment != null) && (admincomment.length() == 0)) {
            projectCacheModel.admincomment = null;
        }

        projectCacheModel.acronym = getAcronym();

        String acronym = projectCacheModel.acronym;

        if ((acronym != null) && (acronym.length() == 0)) {
            projectCacheModel.acronym = null;
        }

        projectCacheModel.title = getTitle();

        String title = projectCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            projectCacheModel.title = null;
        }

        Date startdate = getStartdate();

        if (startdate != null) {
            projectCacheModel.startdate = startdate.getTime();
        } else {
            projectCacheModel.startdate = Long.MIN_VALUE;
        }

        Date enddate = getEnddate();

        if (enddate != null) {
            projectCacheModel.enddate = enddate.getTime();
        } else {
            projectCacheModel.enddate = Long.MIN_VALUE;
        }

        projectCacheModel.lead = getLead();

        String lead = projectCacheModel.lead;

        if ((lead != null) && (lead.length() == 0)) {
            projectCacheModel.lead = null;
        }

        projectCacheModel.partners = getPartners();

        String partners = projectCacheModel.partners;

        if ((partners != null) && (partners.length() == 0)) {
            projectCacheModel.partners = null;
        }

        projectCacheModel.funding = getFunding();

        String funding = projectCacheModel.funding;

        if ((funding != null) && (funding.length() == 0)) {
            projectCacheModel.funding = null;
        }

        projectCacheModel.sectors = getSectors();

        String sectors = projectCacheModel.sectors;

        if ((sectors != null) && (sectors.length() == 0)) {
            projectCacheModel.sectors = null;
        }

        projectCacheModel.spatiallayer = getSpatiallayer();

        String spatiallayer = projectCacheModel.spatiallayer;

        if ((spatiallayer != null) && (spatiallayer.length() == 0)) {
            projectCacheModel.spatiallayer = null;
        }

        projectCacheModel.abstracts = getAbstracts();

        String abstracts = projectCacheModel.abstracts;

        if ((abstracts != null) && (abstracts.length() == 0)) {
            projectCacheModel.abstracts = null;
        }

        projectCacheModel.element = getElement();

        String element = projectCacheModel.element;

        if ((element != null) && (element.length() == 0)) {
            projectCacheModel.element = null;
        }

        projectCacheModel.keywords = getKeywords();

        String keywords = projectCacheModel.keywords;

        if ((keywords != null) && (keywords.length() == 0)) {
            projectCacheModel.keywords = null;
        }

        projectCacheModel.website = getWebsite();

        String website = projectCacheModel.website;

        if ((website != null) && (website.length() == 0)) {
            projectCacheModel.website = null;
        }

        projectCacheModel.duration = getDuration();

        String duration = projectCacheModel.duration;

        if ((duration != null) && (duration.length() == 0)) {
            projectCacheModel.duration = null;
        }

        projectCacheModel.rating = getRating();

        projectCacheModel.importance = getImportance();

        projectCacheModel.specialtagging = getSpecialtagging();

        String specialtagging = projectCacheModel.specialtagging;

        if ((specialtagging != null) && (specialtagging.length() == 0)) {
            projectCacheModel.specialtagging = null;
        }

        projectCacheModel.controlstatus = getControlstatus();

        projectCacheModel.creator = getCreator();

        String creator = projectCacheModel.creator;

        if ((creator != null) && (creator.length() == 0)) {
            projectCacheModel.creator = null;
        }

        Date creationdate = getCreationdate();

        if (creationdate != null) {
            projectCacheModel.creationdate = creationdate.getTime();
        } else {
            projectCacheModel.creationdate = Long.MIN_VALUE;
        }

        projectCacheModel.moderator = getModerator();

        String moderator = projectCacheModel.moderator;

        if ((moderator != null) && (moderator.length() == 0)) {
            projectCacheModel.moderator = null;
        }

        Date approvaldate = getApprovaldate();

        if (approvaldate != null) {
            projectCacheModel.approvaldate = approvaldate.getTime();
        } else {
            projectCacheModel.approvaldate = Long.MIN_VALUE;
        }

        projectCacheModel.replacesId = getReplacesId();

        projectCacheModel.comments = getComments();

        String comments = projectCacheModel.comments;

        if ((comments != null) && (comments.length() == 0)) {
            projectCacheModel.comments = null;
        }

        projectCacheModel.textwebpage = getTextwebpage();

        String textwebpage = projectCacheModel.textwebpage;

        if ((textwebpage != null) && (textwebpage.length() == 0)) {
            projectCacheModel.textwebpage = null;
        }

        projectCacheModel.spatialvalues = getSpatialvalues();

        String spatialvalues = projectCacheModel.spatialvalues;

        if ((spatialvalues != null) && (spatialvalues.length() == 0)) {
            projectCacheModel.spatialvalues = null;
        }

        projectCacheModel.source = getSource();

        String source = projectCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            projectCacheModel.source = null;
        }

        projectCacheModel.climateimpacts = getClimateimpacts();

        String climateimpacts = projectCacheModel.climateimpacts;

        if ((climateimpacts != null) && (climateimpacts.length() == 0)) {
            projectCacheModel.climateimpacts = null;
        }

        Date lockdate = getLockdate();

        if (lockdate != null) {
            projectCacheModel.lockdate = lockdate.getTime();
        } else {
            projectCacheModel.lockdate = Long.MIN_VALUE;
        }

        projectCacheModel.feature = getFeature();

        String feature = projectCacheModel.feature;

        if ((feature != null) && (feature.length() == 0)) {
            projectCacheModel.feature = null;
        }

        projectCacheModel.supdocs = getSupdocs();

        String supdocs = projectCacheModel.supdocs;

        if ((supdocs != null) && (supdocs.length() == 0)) {
            projectCacheModel.supdocs = null;
        }

        projectCacheModel.geochars = getGeochars();

        String geochars = projectCacheModel.geochars;

        if ((geochars != null) && (geochars.length() == 0)) {
            projectCacheModel.geochars = null;
        }

        return projectCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(73);

        sb.append("{projectId=");
        sb.append(getProjectId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", admincomment=");
        sb.append(getAdmincomment());
        sb.append(", acronym=");
        sb.append(getAcronym());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", startdate=");
        sb.append(getStartdate());
        sb.append(", enddate=");
        sb.append(getEnddate());
        sb.append(", lead=");
        sb.append(getLead());
        sb.append(", partners=");
        sb.append(getPartners());
        sb.append(", funding=");
        sb.append(getFunding());
        sb.append(", sectors=");
        sb.append(getSectors());
        sb.append(", spatiallayer=");
        sb.append(getSpatiallayer());
        sb.append(", abstracts=");
        sb.append(getAbstracts());
        sb.append(", element=");
        sb.append(getElement());
        sb.append(", keywords=");
        sb.append(getKeywords());
        sb.append(", website=");
        sb.append(getWebsite());
        sb.append(", duration=");
        sb.append(getDuration());
        sb.append(", rating=");
        sb.append(getRating());
        sb.append(", importance=");
        sb.append(getImportance());
        sb.append(", specialtagging=");
        sb.append(getSpecialtagging());
        sb.append(", controlstatus=");
        sb.append(getControlstatus());
        sb.append(", creator=");
        sb.append(getCreator());
        sb.append(", creationdate=");
        sb.append(getCreationdate());
        sb.append(", moderator=");
        sb.append(getModerator());
        sb.append(", approvaldate=");
        sb.append(getApprovaldate());
        sb.append(", replacesId=");
        sb.append(getReplacesId());
        sb.append(", comments=");
        sb.append(getComments());
        sb.append(", textwebpage=");
        sb.append(getTextwebpage());
        sb.append(", spatialvalues=");
        sb.append(getSpatialvalues());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", climateimpacts=");
        sb.append(getClimateimpacts());
        sb.append(", lockdate=");
        sb.append(getLockdate());
        sb.append(", feature=");
        sb.append(getFeature());
        sb.append(", supdocs=");
        sb.append(getSupdocs());
        sb.append(", geochars=");
        sb.append(getGeochars());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(112);

        sb.append("<model><model-name>");
        sb.append("nl.wur.alterra.cgi.ace.model.Project");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>projectId</column-name><column-value><![CDATA[");
        sb.append(getProjectId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>admincomment</column-name><column-value><![CDATA[");
        sb.append(getAdmincomment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>acronym</column-name><column-value><![CDATA[");
        sb.append(getAcronym());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startdate</column-name><column-value><![CDATA[");
        sb.append(getStartdate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>enddate</column-name><column-value><![CDATA[");
        sb.append(getEnddate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lead</column-name><column-value><![CDATA[");
        sb.append(getLead());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>partners</column-name><column-value><![CDATA[");
        sb.append(getPartners());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>funding</column-name><column-value><![CDATA[");
        sb.append(getFunding());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectors</column-name><column-value><![CDATA[");
        sb.append(getSectors());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>spatiallayer</column-name><column-value><![CDATA[");
        sb.append(getSpatiallayer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>abstracts</column-name><column-value><![CDATA[");
        sb.append(getAbstracts());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>element</column-name><column-value><![CDATA[");
        sb.append(getElement());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>keywords</column-name><column-value><![CDATA[");
        sb.append(getKeywords());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>website</column-name><column-value><![CDATA[");
        sb.append(getWebsite());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>duration</column-name><column-value><![CDATA[");
        sb.append(getDuration());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rating</column-name><column-value><![CDATA[");
        sb.append(getRating());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>importance</column-name><column-value><![CDATA[");
        sb.append(getImportance());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>specialtagging</column-name><column-value><![CDATA[");
        sb.append(getSpecialtagging());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>controlstatus</column-name><column-value><![CDATA[");
        sb.append(getControlstatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creator</column-name><column-value><![CDATA[");
        sb.append(getCreator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creationdate</column-name><column-value><![CDATA[");
        sb.append(getCreationdate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>moderator</column-name><column-value><![CDATA[");
        sb.append(getModerator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>approvaldate</column-name><column-value><![CDATA[");
        sb.append(getApprovaldate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>replacesId</column-name><column-value><![CDATA[");
        sb.append(getReplacesId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>comments</column-name><column-value><![CDATA[");
        sb.append(getComments());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>textwebpage</column-name><column-value><![CDATA[");
        sb.append(getTextwebpage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>spatialvalues</column-name><column-value><![CDATA[");
        sb.append(getSpatialvalues());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>climateimpacts</column-name><column-value><![CDATA[");
        sb.append(getClimateimpacts());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lockdate</column-name><column-value><![CDATA[");
        sb.append(getLockdate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>feature</column-name><column-value><![CDATA[");
        sb.append(getFeature());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>supdocs</column-name><column-value><![CDATA[");
        sb.append(getSupdocs());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>geochars</column-name><column-value><![CDATA[");
        sb.append(getGeochars());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
