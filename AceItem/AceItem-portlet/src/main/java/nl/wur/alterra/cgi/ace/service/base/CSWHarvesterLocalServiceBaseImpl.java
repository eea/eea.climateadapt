package nl.wur.alterra.cgi.ace.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;

import nl.wur.alterra.cgi.ace.model.CSWHarvester;
import nl.wur.alterra.cgi.ace.service.CSWHarvesterLocalService;
import nl.wur.alterra.cgi.ace.service.persistence.AceItemPersistence;
import nl.wur.alterra.cgi.ace.service.persistence.CSWHarvesterPersistence;
import nl.wur.alterra.cgi.ace.service.persistence.WxsHarvesterPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the c s w harvester local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link nl.wur.alterra.cgi.ace.service.impl.CSWHarvesterLocalServiceImpl}.
 * </p>
 *
 * @author groot052
 * @see nl.wur.alterra.cgi.ace.service.impl.CSWHarvesterLocalServiceImpl
 * @see nl.wur.alterra.cgi.ace.service.CSWHarvesterLocalServiceUtil
 * @generated
 */
public abstract class CSWHarvesterLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements CSWHarvesterLocalService,
        IdentifiableBean {
    @BeanReference(type = nl.wur.alterra.cgi.ace.service.AceItemLocalService.class)
    protected nl.wur.alterra.cgi.ace.service.AceItemLocalService aceItemLocalService;
    @BeanReference(type = AceItemPersistence.class)
    protected AceItemPersistence aceItemPersistence;
    @BeanReference(type = nl.wur.alterra.cgi.ace.service.CSWHarvesterLocalService.class)
    protected nl.wur.alterra.cgi.ace.service.CSWHarvesterLocalService cswHarvesterLocalService;
    @BeanReference(type = CSWHarvesterPersistence.class)
    protected CSWHarvesterPersistence cswHarvesterPersistence;
    @BeanReference(type = nl.wur.alterra.cgi.ace.service.WxsHarvesterLocalService.class)
    protected nl.wur.alterra.cgi.ace.service.WxsHarvesterLocalService wxsHarvesterLocalService;
    @BeanReference(type = WxsHarvesterPersistence.class)
    protected WxsHarvesterPersistence wxsHarvesterPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
    protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
    protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
    @BeanReference(type = AssetEntryPersistence.class)
    protected AssetEntryPersistence assetEntryPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private CSWHarvesterLocalServiceClpInvoker _clpInvoker = new CSWHarvesterLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link nl.wur.alterra.cgi.ace.service.CSWHarvesterLocalServiceUtil} to access the c s w harvester local service.
     */

    /**
     * Adds the c s w harvester to the database. Also notifies the appropriate model listeners.
     *
     * @param cswHarvester the c s w harvester
     * @return the c s w harvester that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public CSWHarvester addCSWHarvester(CSWHarvester cswHarvester)
        throws SystemException {
        cswHarvester.setNew(true);

        return cswHarvesterPersistence.update(cswHarvester);
    }

    /**
     * Creates a new c s w harvester with the primary key. Does not add the c s w harvester to the database.
     *
     * @param cswharvesterid the primary key for the new c s w harvester
     * @return the new c s w harvester
     */
    @Override
    public CSWHarvester createCSWHarvester(long cswharvesterid) {
        return cswHarvesterPersistence.create(cswharvesterid);
    }

    /**
     * Deletes the c s w harvester with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param cswharvesterid the primary key of the c s w harvester
     * @return the c s w harvester that was removed
     * @throws PortalException if a c s w harvester with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public CSWHarvester deleteCSWHarvester(long cswharvesterid)
        throws PortalException, SystemException {
        return cswHarvesterPersistence.remove(cswharvesterid);
    }

    /**
     * Deletes the c s w harvester from the database. Also notifies the appropriate model listeners.
     *
     * @param cswHarvester the c s w harvester
     * @return the c s w harvester that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public CSWHarvester deleteCSWHarvester(CSWHarvester cswHarvester)
        throws SystemException {
        return cswHarvesterPersistence.remove(cswHarvester);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(CSWHarvester.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return cswHarvesterPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link nl.wur.alterra.cgi.ace.model.impl.CSWHarvesterModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return cswHarvesterPersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link nl.wur.alterra.cgi.ace.model.impl.CSWHarvesterModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return cswHarvesterPersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return cswHarvesterPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return cswHarvesterPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public CSWHarvester fetchCSWHarvester(long cswharvesterid)
        throws SystemException {
        return cswHarvesterPersistence.fetchByPrimaryKey(cswharvesterid);
    }

    /**
     * Returns the c s w harvester with the primary key.
     *
     * @param cswharvesterid the primary key of the c s w harvester
     * @return the c s w harvester
     * @throws PortalException if a c s w harvester with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public CSWHarvester getCSWHarvester(long cswharvesterid)
        throws PortalException, SystemException {
        return cswHarvesterPersistence.findByPrimaryKey(cswharvesterid);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return cswHarvesterPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the c s w harvesters.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link nl.wur.alterra.cgi.ace.model.impl.CSWHarvesterModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of c s w harvesters
     * @param end the upper bound of the range of c s w harvesters (not inclusive)
     * @return the range of c s w harvesters
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<CSWHarvester> getCSWHarvesters(int start, int end)
        throws SystemException {
        return cswHarvesterPersistence.findAll(start, end);
    }

    /**
     * Returns the number of c s w harvesters.
     *
     * @return the number of c s w harvesters
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getCSWHarvestersCount() throws SystemException {
        return cswHarvesterPersistence.countAll();
    }

    /**
     * Updates the c s w harvester in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param cswHarvester the c s w harvester
     * @return the c s w harvester that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public CSWHarvester updateCSWHarvester(CSWHarvester cswHarvester)
        throws SystemException {
        return cswHarvesterPersistence.update(cswHarvester);
    }

    /**
     * Returns the ace item local service.
     *
     * @return the ace item local service
     */
    public nl.wur.alterra.cgi.ace.service.AceItemLocalService getAceItemLocalService() {
        return aceItemLocalService;
    }

    /**
     * Sets the ace item local service.
     *
     * @param aceItemLocalService the ace item local service
     */
    public void setAceItemLocalService(
        nl.wur.alterra.cgi.ace.service.AceItemLocalService aceItemLocalService) {
        this.aceItemLocalService = aceItemLocalService;
    }

    /**
     * Returns the ace item persistence.
     *
     * @return the ace item persistence
     */
    public AceItemPersistence getAceItemPersistence() {
        return aceItemPersistence;
    }

    /**
     * Sets the ace item persistence.
     *
     * @param aceItemPersistence the ace item persistence
     */
    public void setAceItemPersistence(AceItemPersistence aceItemPersistence) {
        this.aceItemPersistence = aceItemPersistence;
    }

    /**
     * Returns the c s w harvester local service.
     *
     * @return the c s w harvester local service
     */
    public nl.wur.alterra.cgi.ace.service.CSWHarvesterLocalService getCSWHarvesterLocalService() {
        return cswHarvesterLocalService;
    }

    /**
     * Sets the c s w harvester local service.
     *
     * @param cswHarvesterLocalService the c s w harvester local service
     */
    public void setCSWHarvesterLocalService(
        nl.wur.alterra.cgi.ace.service.CSWHarvesterLocalService cswHarvesterLocalService) {
        this.cswHarvesterLocalService = cswHarvesterLocalService;
    }

    /**
     * Returns the c s w harvester persistence.
     *
     * @return the c s w harvester persistence
     */
    public CSWHarvesterPersistence getCSWHarvesterPersistence() {
        return cswHarvesterPersistence;
    }

    /**
     * Sets the c s w harvester persistence.
     *
     * @param cswHarvesterPersistence the c s w harvester persistence
     */
    public void setCSWHarvesterPersistence(
        CSWHarvesterPersistence cswHarvesterPersistence) {
        this.cswHarvesterPersistence = cswHarvesterPersistence;
    }

    /**
     * Returns the wxs harvester local service.
     *
     * @return the wxs harvester local service
     */
    public nl.wur.alterra.cgi.ace.service.WxsHarvesterLocalService getWxsHarvesterLocalService() {
        return wxsHarvesterLocalService;
    }

    /**
     * Sets the wxs harvester local service.
     *
     * @param wxsHarvesterLocalService the wxs harvester local service
     */
    public void setWxsHarvesterLocalService(
        nl.wur.alterra.cgi.ace.service.WxsHarvesterLocalService wxsHarvesterLocalService) {
        this.wxsHarvesterLocalService = wxsHarvesterLocalService;
    }

    /**
     * Returns the wxs harvester persistence.
     *
     * @return the wxs harvester persistence
     */
    public WxsHarvesterPersistence getWxsHarvesterPersistence() {
        return wxsHarvesterPersistence;
    }

    /**
     * Sets the wxs harvester persistence.
     *
     * @param wxsHarvesterPersistence the wxs harvester persistence
     */
    public void setWxsHarvesterPersistence(
        WxsHarvesterPersistence wxsHarvesterPersistence) {
        this.wxsHarvesterPersistence = wxsHarvesterPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    /**
     * Returns the asset entry local service.
     *
     * @return the asset entry local service
     */
    public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
        return assetEntryLocalService;
    }

    /**
     * Sets the asset entry local service.
     *
     * @param assetEntryLocalService the asset entry local service
     */
    public void setAssetEntryLocalService(
        com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
        this.assetEntryLocalService = assetEntryLocalService;
    }

    /**
     * Returns the asset entry remote service.
     *
     * @return the asset entry remote service
     */
    public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
        return assetEntryService;
    }

    /**
     * Sets the asset entry remote service.
     *
     * @param assetEntryService the asset entry remote service
     */
    public void setAssetEntryService(
        com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
        this.assetEntryService = assetEntryService;
    }

    /**
     * Returns the asset entry persistence.
     *
     * @return the asset entry persistence
     */
    public AssetEntryPersistence getAssetEntryPersistence() {
        return assetEntryPersistence;
    }

    /**
     * Sets the asset entry persistence.
     *
     * @param assetEntryPersistence the asset entry persistence
     */
    public void setAssetEntryPersistence(
        AssetEntryPersistence assetEntryPersistence) {
        this.assetEntryPersistence = assetEntryPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("nl.wur.alterra.cgi.ace.model.CSWHarvester",
            cswHarvesterLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "nl.wur.alterra.cgi.ace.model.CSWHarvester");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return CSWHarvester.class;
    }

    protected String getModelClassName() {
        return CSWHarvester.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = cswHarvesterPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
