package nl.wur.alterra.cgi.ace.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import nl.wur.alterra.cgi.ace.model.AceItem;
import nl.wur.alterra.cgi.ace.model.AceItemModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AceItem service. Represents a row in the &quot;Ace_AceItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link nl.wur.alterra.cgi.ace.model.AceItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AceItemImpl}.
 * </p>
 *
 * @author groot052
 * @see AceItemImpl
 * @see nl.wur.alterra.cgi.ace.model.AceItem
 * @see nl.wur.alterra.cgi.ace.model.AceItemModel
 * @generated
 */
public class AceItemModelImpl extends BaseModelImpl<AceItem>
    implements AceItemModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ace item model instance should use the {@link nl.wur.alterra.cgi.ace.model.AceItem} interface instead.
     */
    public static final String TABLE_NAME = "Ace_AceItem";
    public static final Object[][] TABLE_COLUMNS = {
            { "aceItemId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "wxsharvesterId", Types.BIGINT },
            { "cswharvesterId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "datatype", Types.VARCHAR },
            { "storedAt", Types.VARCHAR },
            { "storagetype", Types.VARCHAR },
            { "specialtagging", Types.VARCHAR },
            { "textSearch", Types.VARCHAR },
            { "keyword", Types.VARCHAR },
            { "targetresolution", Types.VARCHAR },
            { "spatialLayer", Types.VARCHAR },
            { "spatialValues", Types.VARCHAR },
            { "startDate", Types.TIMESTAMP },
            { "endDate", Types.TIMESTAMP },
            { "publicationDate", Types.TIMESTAMP },
            { "sectors_", Types.VARCHAR },
            { "elements_", Types.VARCHAR },
            { "climateimpacts_", Types.VARCHAR },
            { "rating", Types.BIGINT },
            { "importance", Types.BIGINT },
            { "source", Types.VARCHAR },
            { "deeplink", Types.VARCHAR },
            { "controlstatus", Types.INTEGER },
            { "creator", Types.VARCHAR },
            { "creationdate", Types.TIMESTAMP },
            { "moderator", Types.VARCHAR },
            { "approvaldate", Types.TIMESTAMP },
            { "replacesId", Types.BIGINT },
            { "comments", Types.VARCHAR },
            { "textwebpage", Types.VARCHAR },
            { "year", Types.VARCHAR },
            { "geochars", Types.VARCHAR },
            { "feature", Types.VARCHAR },
            { "supdocs", Types.VARCHAR },
            { "admincomment", Types.VARCHAR },
            { "scenario", Types.VARCHAR },
            { "timeperiod", Types.VARCHAR },
            { "lockdate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table Ace_AceItem (aceItemId LONG not null primary key,companyId LONG,groupId LONG,wxsharvesterId LONG,cswharvesterId LONG,name VARCHAR(75) null,description VARCHAR(75) null,datatype VARCHAR(75) null,storedAt VARCHAR(75) null,storagetype VARCHAR(75) null,specialtagging VARCHAR(75) null,textSearch VARCHAR(75) null,keyword VARCHAR(75) null,targetresolution VARCHAR(75) null,spatialLayer VARCHAR(75) null,spatialValues VARCHAR(75) null,startDate DATE null,endDate DATE null,publicationDate DATE null,sectors_ VARCHAR(75) null,elements_ VARCHAR(75) null,climateimpacts_ VARCHAR(75) null,rating LONG,importance LONG,source VARCHAR(75) null,deeplink VARCHAR(75) null,controlstatus INTEGER,creator VARCHAR(75) null,creationdate DATE null,moderator VARCHAR(75) null,approvaldate DATE null,replacesId LONG,comments VARCHAR(75) null,textwebpage VARCHAR(75) null,year VARCHAR(75) null,geochars VARCHAR(75) null,feature VARCHAR(75) null,supdocs VARCHAR(75) null,admincomment VARCHAR(75) null,scenario VARCHAR(75) null,timeperiod VARCHAR(75) null,lockdate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table Ace_AceItem";
    public static final String ORDER_BY_JPQL = " ORDER BY aceItem.name ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Ace_AceItem.name ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.nl.wur.alterra.cgi.ace.model.AceItem"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.nl.wur.alterra.cgi.ace.model.AceItem"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.nl.wur.alterra.cgi.ace.model.AceItem"),
            true);
    public static long CSWHARVESTERID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long STOREDAT_COLUMN_BITMASK = 4L;
    public static long WXSHARVESTERID_COLUMN_BITMASK = 8L;
    public static long NAME_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.nl.wur.alterra.cgi.ace.model.AceItem"));
    private static ClassLoader _classLoader = AceItem.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            AceItem.class
        };
    private long _aceItemId;
    private long _companyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _wxsharvesterId;
    private long _originalWxsharvesterId;
    private boolean _setOriginalWxsharvesterId;
    private long _cswharvesterId;
    private long _originalCswharvesterId;
    private boolean _setOriginalCswharvesterId;
    private String _name;
    private String _description;
    private String _datatype;
    private String _storedAt;
    private String _originalStoredAt;
    private String _storagetype;
    private String _specialtagging;
    private String _textSearch;
    private String _keyword;
    private String _targetresolution;
    private String _spatialLayer;
    private String _spatialValues;
    private Date _startDate;
    private Date _endDate;
    private Date _publicationDate;
    private String _sectors_;
    private String _elements_;
    private String _climateimpacts_;
    private long _rating;
    private long _importance;
    private String _source;
    private String _deeplink;
    private short _controlstatus;
    private String _creator;
    private Date _creationdate;
    private String _moderator;
    private Date _approvaldate;
    private long _replacesId;
    private String _comments;
    private String _textwebpage;
    private String _year;
    private String _geochars;
    private String _feature;
    private String _supdocs;
    private String _admincomment;
    private String _scenario;
    private String _timeperiod;
    private Date _lockdate;
    private long _columnBitmask;
    private AceItem _escapedModel;

    public AceItemModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _aceItemId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setAceItemId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _aceItemId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return AceItem.class;
    }

    @Override
    public String getModelClassName() {
        return AceItem.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("aceItemId", getAceItemId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("wxsharvesterId", getWxsharvesterId());
        attributes.put("cswharvesterId", getCswharvesterId());
        attributes.put("name", getName());
        attributes.put("description", getDescription());
        attributes.put("datatype", getDatatype());
        attributes.put("storedAt", getStoredAt());
        attributes.put("storagetype", getStoragetype());
        attributes.put("specialtagging", getSpecialtagging());
        attributes.put("textSearch", getTextSearch());
        attributes.put("keyword", getKeyword());
        attributes.put("targetresolution", getTargetresolution());
        attributes.put("spatialLayer", getSpatialLayer());
        attributes.put("spatialValues", getSpatialValues());
        attributes.put("startDate", getStartDate());
        attributes.put("endDate", getEndDate());
        attributes.put("publicationDate", getPublicationDate());
        attributes.put("sectors_", getSectors_());
        attributes.put("elements_", getElements_());
        attributes.put("climateimpacts_", getClimateimpacts_());
        attributes.put("rating", getRating());
        attributes.put("importance", getImportance());
        attributes.put("source", getSource());
        attributes.put("deeplink", getDeeplink());
        attributes.put("controlstatus", getControlstatus());
        attributes.put("creator", getCreator());
        attributes.put("creationdate", getCreationdate());
        attributes.put("moderator", getModerator());
        attributes.put("approvaldate", getApprovaldate());
        attributes.put("replacesId", getReplacesId());
        attributes.put("comments", getComments());
        attributes.put("textwebpage", getTextwebpage());
        attributes.put("year", getYear());
        attributes.put("geochars", getGeochars());
        attributes.put("feature", getFeature());
        attributes.put("supdocs", getSupdocs());
        attributes.put("admincomment", getAdmincomment());
        attributes.put("scenario", getScenario());
        attributes.put("timeperiod", getTimeperiod());
        attributes.put("lockdate", getLockdate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long aceItemId = (Long) attributes.get("aceItemId");

        if (aceItemId != null) {
            setAceItemId(aceItemId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long wxsharvesterId = (Long) attributes.get("wxsharvesterId");

        if (wxsharvesterId != null) {
            setWxsharvesterId(wxsharvesterId);
        }

        Long cswharvesterId = (Long) attributes.get("cswharvesterId");

        if (cswharvesterId != null) {
            setCswharvesterId(cswharvesterId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String datatype = (String) attributes.get("datatype");

        if (datatype != null) {
            setDatatype(datatype);
        }

        String storedAt = (String) attributes.get("storedAt");

        if (storedAt != null) {
            setStoredAt(storedAt);
        }

        String storagetype = (String) attributes.get("storagetype");

        if (storagetype != null) {
            setStoragetype(storagetype);
        }

        String specialtagging = (String) attributes.get("specialtagging");

        if (specialtagging != null) {
            setSpecialtagging(specialtagging);
        }

        String textSearch = (String) attributes.get("textSearch");

        if (textSearch != null) {
            setTextSearch(textSearch);
        }

        String keyword = (String) attributes.get("keyword");

        if (keyword != null) {
            setKeyword(keyword);
        }

        String targetresolution = (String) attributes.get("targetresolution");

        if (targetresolution != null) {
            setTargetresolution(targetresolution);
        }

        String spatialLayer = (String) attributes.get("spatialLayer");

        if (spatialLayer != null) {
            setSpatialLayer(spatialLayer);
        }

        String spatialValues = (String) attributes.get("spatialValues");

        if (spatialValues != null) {
            setSpatialValues(spatialValues);
        }

        Date startDate = (Date) attributes.get("startDate");

        if (startDate != null) {
            setStartDate(startDate);
        }

        Date endDate = (Date) attributes.get("endDate");

        if (endDate != null) {
            setEndDate(endDate);
        }

        Date publicationDate = (Date) attributes.get("publicationDate");

        if (publicationDate != null) {
            setPublicationDate(publicationDate);
        }

        String sectors_ = (String) attributes.get("sectors_");

        if (sectors_ != null) {
            setSectors_(sectors_);
        }

        String elements_ = (String) attributes.get("elements_");

        if (elements_ != null) {
            setElements_(elements_);
        }

        String climateimpacts_ = (String) attributes.get("climateimpacts_");

        if (climateimpacts_ != null) {
            setClimateimpacts_(climateimpacts_);
        }

        Long rating = (Long) attributes.get("rating");

        if (rating != null) {
            setRating(rating);
        }

        Long importance = (Long) attributes.get("importance");

        if (importance != null) {
            setImportance(importance);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        String deeplink = (String) attributes.get("deeplink");

        if (deeplink != null) {
            setDeeplink(deeplink);
        }

        Short controlstatus = (Short) attributes.get("controlstatus");

        if (controlstatus != null) {
            setControlstatus(controlstatus);
        }

        String creator = (String) attributes.get("creator");

        if (creator != null) {
            setCreator(creator);
        }

        Date creationdate = (Date) attributes.get("creationdate");

        if (creationdate != null) {
            setCreationdate(creationdate);
        }

        String moderator = (String) attributes.get("moderator");

        if (moderator != null) {
            setModerator(moderator);
        }

        Date approvaldate = (Date) attributes.get("approvaldate");

        if (approvaldate != null) {
            setApprovaldate(approvaldate);
        }

        Long replacesId = (Long) attributes.get("replacesId");

        if (replacesId != null) {
            setReplacesId(replacesId);
        }

        String comments = (String) attributes.get("comments");

        if (comments != null) {
            setComments(comments);
        }

        String textwebpage = (String) attributes.get("textwebpage");

        if (textwebpage != null) {
            setTextwebpage(textwebpage);
        }

        String year = (String) attributes.get("year");

        if (year != null) {
            setYear(year);
        }

        String geochars = (String) attributes.get("geochars");

        if (geochars != null) {
            setGeochars(geochars);
        }

        String feature = (String) attributes.get("feature");

        if (feature != null) {
            setFeature(feature);
        }

        String supdocs = (String) attributes.get("supdocs");

        if (supdocs != null) {
            setSupdocs(supdocs);
        }

        String admincomment = (String) attributes.get("admincomment");

        if (admincomment != null) {
            setAdmincomment(admincomment);
        }

        String scenario = (String) attributes.get("scenario");

        if (scenario != null) {
            setScenario(scenario);
        }

        String timeperiod = (String) attributes.get("timeperiod");

        if (timeperiod != null) {
            setTimeperiod(timeperiod);
        }

        Date lockdate = (Date) attributes.get("lockdate");

        if (lockdate != null) {
            setLockdate(lockdate);
        }
    }

    @Override
    public long getAceItemId() {
        return _aceItemId;
    }

    @Override
    public void setAceItemId(long aceItemId) {
        _aceItemId = aceItemId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public long getWxsharvesterId() {
        return _wxsharvesterId;
    }

    @Override
    public void setWxsharvesterId(long wxsharvesterId) {
        _columnBitmask |= WXSHARVESTERID_COLUMN_BITMASK;

        if (!_setOriginalWxsharvesterId) {
            _setOriginalWxsharvesterId = true;

            _originalWxsharvesterId = _wxsharvesterId;
        }

        _wxsharvesterId = wxsharvesterId;
    }

    public long getOriginalWxsharvesterId() {
        return _originalWxsharvesterId;
    }

    @Override
    public long getCswharvesterId() {
        return _cswharvesterId;
    }

    @Override
    public void setCswharvesterId(long cswharvesterId) {
        _columnBitmask |= CSWHARVESTERID_COLUMN_BITMASK;

        if (!_setOriginalCswharvesterId) {
            _setOriginalCswharvesterId = true;

            _originalCswharvesterId = _cswharvesterId;
        }

        _cswharvesterId = cswharvesterId;
    }

    public long getOriginalCswharvesterId() {
        return _originalCswharvesterId;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask = -1L;

        _name = name;
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public String getDatatype() {
        if (_datatype == null) {
            return StringPool.BLANK;
        } else {
            return _datatype;
        }
    }

    @Override
    public void setDatatype(String datatype) {
        _datatype = datatype;
    }

    @Override
    public String getStoredAt() {
        if (_storedAt == null) {
            return StringPool.BLANK;
        } else {
            return _storedAt;
        }
    }

    @Override
    public void setStoredAt(String storedAt) {
        _columnBitmask |= STOREDAT_COLUMN_BITMASK;

        if (_originalStoredAt == null) {
            _originalStoredAt = _storedAt;
        }

        _storedAt = storedAt;
    }

    public String getOriginalStoredAt() {
        return GetterUtil.getString(_originalStoredAt);
    }

    @Override
    public String getStoragetype() {
        if (_storagetype == null) {
            return StringPool.BLANK;
        } else {
            return _storagetype;
        }
    }

    @Override
    public void setStoragetype(String storagetype) {
        _storagetype = storagetype;
    }

    @Override
    public String getSpecialtagging() {
        if (_specialtagging == null) {
            return StringPool.BLANK;
        } else {
            return _specialtagging;
        }
    }

    @Override
    public void setSpecialtagging(String specialtagging) {
        _specialtagging = specialtagging;
    }

    @Override
    public String getTextSearch() {
        if (_textSearch == null) {
            return StringPool.BLANK;
        } else {
            return _textSearch;
        }
    }

    @Override
    public void setTextSearch(String textSearch) {
        _textSearch = textSearch;
    }

    @Override
    public String getKeyword() {
        if (_keyword == null) {
            return StringPool.BLANK;
        } else {
            return _keyword;
        }
    }

    @Override
    public void setKeyword(String keyword) {
        _keyword = keyword;
    }

    @Override
    public String getTargetresolution() {
        if (_targetresolution == null) {
            return StringPool.BLANK;
        } else {
            return _targetresolution;
        }
    }

    @Override
    public void setTargetresolution(String targetresolution) {
        _targetresolution = targetresolution;
    }

    @Override
    public String getSpatialLayer() {
        if (_spatialLayer == null) {
            return StringPool.BLANK;
        } else {
            return _spatialLayer;
        }
    }

    @Override
    public void setSpatialLayer(String spatialLayer) {
        _spatialLayer = spatialLayer;
    }

    @Override
    public String getSpatialValues() {
        if (_spatialValues == null) {
            return StringPool.BLANK;
        } else {
            return _spatialValues;
        }
    }

    @Override
    public void setSpatialValues(String spatialValues) {
        _spatialValues = spatialValues;
    }

    @Override
    public Date getStartDate() {
        return _startDate;
    }

    @Override
    public void setStartDate(Date startDate) {
        _startDate = startDate;
    }

    @Override
    public Date getEndDate() {
        return _endDate;
    }

    @Override
    public void setEndDate(Date endDate) {
        _endDate = endDate;
    }

    @Override
    public Date getPublicationDate() {
        return _publicationDate;
    }

    @Override
    public void setPublicationDate(Date publicationDate) {
        _publicationDate = publicationDate;
    }

    @Override
    public String getSectors_() {
        if (_sectors_ == null) {
            return StringPool.BLANK;
        } else {
            return _sectors_;
        }
    }

    @Override
    public void setSectors_(String sectors_) {
        _sectors_ = sectors_;
    }

    @Override
    public String getElements_() {
        if (_elements_ == null) {
            return StringPool.BLANK;
        } else {
            return _elements_;
        }
    }

    @Override
    public void setElements_(String elements_) {
        _elements_ = elements_;
    }

    @Override
    public String getClimateimpacts_() {
        if (_climateimpacts_ == null) {
            return StringPool.BLANK;
        } else {
            return _climateimpacts_;
        }
    }

    @Override
    public void setClimateimpacts_(String climateimpacts_) {
        _climateimpacts_ = climateimpacts_;
    }

    @Override
    public long getRating() {
        return _rating;
    }

    @Override
    public void setRating(long rating) {
        _rating = rating;
    }

    @Override
    public long getImportance() {
        return _importance;
    }

    @Override
    public void setImportance(long importance) {
        _importance = importance;
    }

    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @Override
    public String getDeeplink() {
        if (_deeplink == null) {
            return StringPool.BLANK;
        } else {
            return _deeplink;
        }
    }

    @Override
    public void setDeeplink(String deeplink) {
        _deeplink = deeplink;
    }

    @Override
    public short getControlstatus() {
        return _controlstatus;
    }

    @Override
    public void setControlstatus(short controlstatus) {
        _controlstatus = controlstatus;
    }

    @Override
    public String getCreator() {
        if (_creator == null) {
            return StringPool.BLANK;
        } else {
            return _creator;
        }
    }

    @Override
    public void setCreator(String creator) {
        _creator = creator;
    }

    @Override
    public Date getCreationdate() {
        return _creationdate;
    }

    @Override
    public void setCreationdate(Date creationdate) {
        _creationdate = creationdate;
    }

    @Override
    public String getModerator() {
        if (_moderator == null) {
            return StringPool.BLANK;
        } else {
            return _moderator;
        }
    }

    @Override
    public void setModerator(String moderator) {
        _moderator = moderator;
    }

    @Override
    public Date getApprovaldate() {
        return _approvaldate;
    }

    @Override
    public void setApprovaldate(Date approvaldate) {
        _approvaldate = approvaldate;
    }

    @Override
    public long getReplacesId() {
        return _replacesId;
    }

    @Override
    public void setReplacesId(long replacesId) {
        _replacesId = replacesId;
    }

    @Override
    public String getComments() {
        if (_comments == null) {
            return StringPool.BLANK;
        } else {
            return _comments;
        }
    }

    @Override
    public void setComments(String comments) {
        _comments = comments;
    }

    @Override
    public String getTextwebpage() {
        if (_textwebpage == null) {
            return StringPool.BLANK;
        } else {
            return _textwebpage;
        }
    }

    @Override
    public void setTextwebpage(String textwebpage) {
        _textwebpage = textwebpage;
    }

    @Override
    public String getYear() {
        if (_year == null) {
            return StringPool.BLANK;
        } else {
            return _year;
        }
    }

    @Override
    public void setYear(String year) {
        _year = year;
    }

    @Override
    public String getGeochars() {
        if (_geochars == null) {
            return StringPool.BLANK;
        } else {
            return _geochars;
        }
    }

    @Override
    public void setGeochars(String geochars) {
        _geochars = geochars;
    }

    @Override
    public String getFeature() {
        if (_feature == null) {
            return StringPool.BLANK;
        } else {
            return _feature;
        }
    }

    @Override
    public void setFeature(String feature) {
        _feature = feature;
    }

    @Override
    public String getSupdocs() {
        if (_supdocs == null) {
            return StringPool.BLANK;
        } else {
            return _supdocs;
        }
    }

    @Override
    public void setSupdocs(String supdocs) {
        _supdocs = supdocs;
    }

    @Override
    public String getAdmincomment() {
        if (_admincomment == null) {
            return StringPool.BLANK;
        } else {
            return _admincomment;
        }
    }

    @Override
    public void setAdmincomment(String admincomment) {
        _admincomment = admincomment;
    }

    @Override
    public String getScenario() {
        if (_scenario == null) {
            return StringPool.BLANK;
        } else {
            return _scenario;
        }
    }

    @Override
    public void setScenario(String scenario) {
        _scenario = scenario;
    }

    @Override
    public String getTimeperiod() {
        if (_timeperiod == null) {
            return StringPool.BLANK;
        } else {
            return _timeperiod;
        }
    }

    @Override
    public void setTimeperiod(String timeperiod) {
        _timeperiod = timeperiod;
    }

    @Override
    public Date getLockdate() {
        return _lockdate;
    }

    @Override
    public void setLockdate(Date lockdate) {
        _lockdate = lockdate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            AceItem.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public AceItem toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (AceItem) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        AceItemImpl aceItemImpl = new AceItemImpl();

        aceItemImpl.setAceItemId(getAceItemId());
        aceItemImpl.setCompanyId(getCompanyId());
        aceItemImpl.setGroupId(getGroupId());
        aceItemImpl.setWxsharvesterId(getWxsharvesterId());
        aceItemImpl.setCswharvesterId(getCswharvesterId());
        aceItemImpl.setName(getName());
        aceItemImpl.setDescription(getDescription());
        aceItemImpl.setDatatype(getDatatype());
        aceItemImpl.setStoredAt(getStoredAt());
        aceItemImpl.setStoragetype(getStoragetype());
        aceItemImpl.setSpecialtagging(getSpecialtagging());
        aceItemImpl.setTextSearch(getTextSearch());
        aceItemImpl.setKeyword(getKeyword());
        aceItemImpl.setTargetresolution(getTargetresolution());
        aceItemImpl.setSpatialLayer(getSpatialLayer());
        aceItemImpl.setSpatialValues(getSpatialValues());
        aceItemImpl.setStartDate(getStartDate());
        aceItemImpl.setEndDate(getEndDate());
        aceItemImpl.setPublicationDate(getPublicationDate());
        aceItemImpl.setSectors_(getSectors_());
        aceItemImpl.setElements_(getElements_());
        aceItemImpl.setClimateimpacts_(getClimateimpacts_());
        aceItemImpl.setRating(getRating());
        aceItemImpl.setImportance(getImportance());
        aceItemImpl.setSource(getSource());
        aceItemImpl.setDeeplink(getDeeplink());
        aceItemImpl.setControlstatus(getControlstatus());
        aceItemImpl.setCreator(getCreator());
        aceItemImpl.setCreationdate(getCreationdate());
        aceItemImpl.setModerator(getModerator());
        aceItemImpl.setApprovaldate(getApprovaldate());
        aceItemImpl.setReplacesId(getReplacesId());
        aceItemImpl.setComments(getComments());
        aceItemImpl.setTextwebpage(getTextwebpage());
        aceItemImpl.setYear(getYear());
        aceItemImpl.setGeochars(getGeochars());
        aceItemImpl.setFeature(getFeature());
        aceItemImpl.setSupdocs(getSupdocs());
        aceItemImpl.setAdmincomment(getAdmincomment());
        aceItemImpl.setScenario(getScenario());
        aceItemImpl.setTimeperiod(getTimeperiod());
        aceItemImpl.setLockdate(getLockdate());

        aceItemImpl.resetOriginalValues();

        return aceItemImpl;
    }

    @Override
    public int compareTo(AceItem aceItem) {
        int value = 0;

        value = getName().compareTo(aceItem.getName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof AceItem)) {
            return false;
        }

        AceItem aceItem = (AceItem) obj;

        long primaryKey = aceItem.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        AceItemModelImpl aceItemModelImpl = this;

        aceItemModelImpl._originalGroupId = aceItemModelImpl._groupId;

        aceItemModelImpl._setOriginalGroupId = false;

        aceItemModelImpl._originalWxsharvesterId = aceItemModelImpl._wxsharvesterId;

        aceItemModelImpl._setOriginalWxsharvesterId = false;

        aceItemModelImpl._originalCswharvesterId = aceItemModelImpl._cswharvesterId;

        aceItemModelImpl._setOriginalCswharvesterId = false;

        aceItemModelImpl._originalStoredAt = aceItemModelImpl._storedAt;

        aceItemModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<AceItem> toCacheModel() {
        AceItemCacheModel aceItemCacheModel = new AceItemCacheModel();

        aceItemCacheModel.aceItemId = getAceItemId();

        aceItemCacheModel.companyId = getCompanyId();

        aceItemCacheModel.groupId = getGroupId();

        aceItemCacheModel.wxsharvesterId = getWxsharvesterId();

        aceItemCacheModel.cswharvesterId = getCswharvesterId();

        aceItemCacheModel.name = getName();

        String name = aceItemCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            aceItemCacheModel.name = null;
        }

        aceItemCacheModel.description = getDescription();

        String description = aceItemCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            aceItemCacheModel.description = null;
        }

        aceItemCacheModel.datatype = getDatatype();

        String datatype = aceItemCacheModel.datatype;

        if ((datatype != null) && (datatype.length() == 0)) {
            aceItemCacheModel.datatype = null;
        }

        aceItemCacheModel.storedAt = getStoredAt();

        String storedAt = aceItemCacheModel.storedAt;

        if ((storedAt != null) && (storedAt.length() == 0)) {
            aceItemCacheModel.storedAt = null;
        }

        aceItemCacheModel.storagetype = getStoragetype();

        String storagetype = aceItemCacheModel.storagetype;

        if ((storagetype != null) && (storagetype.length() == 0)) {
            aceItemCacheModel.storagetype = null;
        }

        aceItemCacheModel.specialtagging = getSpecialtagging();

        String specialtagging = aceItemCacheModel.specialtagging;

        if ((specialtagging != null) && (specialtagging.length() == 0)) {
            aceItemCacheModel.specialtagging = null;
        }

        aceItemCacheModel.textSearch = getTextSearch();

        String textSearch = aceItemCacheModel.textSearch;

        if ((textSearch != null) && (textSearch.length() == 0)) {
            aceItemCacheModel.textSearch = null;
        }

        aceItemCacheModel.keyword = getKeyword();

        String keyword = aceItemCacheModel.keyword;

        if ((keyword != null) && (keyword.length() == 0)) {
            aceItemCacheModel.keyword = null;
        }

        aceItemCacheModel.targetresolution = getTargetresolution();

        String targetresolution = aceItemCacheModel.targetresolution;

        if ((targetresolution != null) && (targetresolution.length() == 0)) {
            aceItemCacheModel.targetresolution = null;
        }

        aceItemCacheModel.spatialLayer = getSpatialLayer();

        String spatialLayer = aceItemCacheModel.spatialLayer;

        if ((spatialLayer != null) && (spatialLayer.length() == 0)) {
            aceItemCacheModel.spatialLayer = null;
        }

        aceItemCacheModel.spatialValues = getSpatialValues();

        String spatialValues = aceItemCacheModel.spatialValues;

        if ((spatialValues != null) && (spatialValues.length() == 0)) {
            aceItemCacheModel.spatialValues = null;
        }

        Date startDate = getStartDate();

        if (startDate != null) {
            aceItemCacheModel.startDate = startDate.getTime();
        } else {
            aceItemCacheModel.startDate = Long.MIN_VALUE;
        }

        Date endDate = getEndDate();

        if (endDate != null) {
            aceItemCacheModel.endDate = endDate.getTime();
        } else {
            aceItemCacheModel.endDate = Long.MIN_VALUE;
        }

        Date publicationDate = getPublicationDate();

        if (publicationDate != null) {
            aceItemCacheModel.publicationDate = publicationDate.getTime();
        } else {
            aceItemCacheModel.publicationDate = Long.MIN_VALUE;
        }

        aceItemCacheModel.sectors_ = getSectors_();

        String sectors_ = aceItemCacheModel.sectors_;

        if ((sectors_ != null) && (sectors_.length() == 0)) {
            aceItemCacheModel.sectors_ = null;
        }

        aceItemCacheModel.elements_ = getElements_();

        String elements_ = aceItemCacheModel.elements_;

        if ((elements_ != null) && (elements_.length() == 0)) {
            aceItemCacheModel.elements_ = null;
        }

        aceItemCacheModel.climateimpacts_ = getClimateimpacts_();

        String climateimpacts_ = aceItemCacheModel.climateimpacts_;

        if ((climateimpacts_ != null) && (climateimpacts_.length() == 0)) {
            aceItemCacheModel.climateimpacts_ = null;
        }

        aceItemCacheModel.rating = getRating();

        aceItemCacheModel.importance = getImportance();

        aceItemCacheModel.source = getSource();

        String source = aceItemCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            aceItemCacheModel.source = null;
        }

        aceItemCacheModel.deeplink = getDeeplink();

        String deeplink = aceItemCacheModel.deeplink;

        if ((deeplink != null) && (deeplink.length() == 0)) {
            aceItemCacheModel.deeplink = null;
        }

        aceItemCacheModel.controlstatus = getControlstatus();

        aceItemCacheModel.creator = getCreator();

        String creator = aceItemCacheModel.creator;

        if ((creator != null) && (creator.length() == 0)) {
            aceItemCacheModel.creator = null;
        }

        Date creationdate = getCreationdate();

        if (creationdate != null) {
            aceItemCacheModel.creationdate = creationdate.getTime();
        } else {
            aceItemCacheModel.creationdate = Long.MIN_VALUE;
        }

        aceItemCacheModel.moderator = getModerator();

        String moderator = aceItemCacheModel.moderator;

        if ((moderator != null) && (moderator.length() == 0)) {
            aceItemCacheModel.moderator = null;
        }

        Date approvaldate = getApprovaldate();

        if (approvaldate != null) {
            aceItemCacheModel.approvaldate = approvaldate.getTime();
        } else {
            aceItemCacheModel.approvaldate = Long.MIN_VALUE;
        }

        aceItemCacheModel.replacesId = getReplacesId();

        aceItemCacheModel.comments = getComments();

        String comments = aceItemCacheModel.comments;

        if ((comments != null) && (comments.length() == 0)) {
            aceItemCacheModel.comments = null;
        }

        aceItemCacheModel.textwebpage = getTextwebpage();

        String textwebpage = aceItemCacheModel.textwebpage;

        if ((textwebpage != null) && (textwebpage.length() == 0)) {
            aceItemCacheModel.textwebpage = null;
        }

        aceItemCacheModel.year = getYear();

        String year = aceItemCacheModel.year;

        if ((year != null) && (year.length() == 0)) {
            aceItemCacheModel.year = null;
        }

        aceItemCacheModel.geochars = getGeochars();

        String geochars = aceItemCacheModel.geochars;

        if ((geochars != null) && (geochars.length() == 0)) {
            aceItemCacheModel.geochars = null;
        }

        aceItemCacheModel.feature = getFeature();

        String feature = aceItemCacheModel.feature;

        if ((feature != null) && (feature.length() == 0)) {
            aceItemCacheModel.feature = null;
        }

        aceItemCacheModel.supdocs = getSupdocs();

        String supdocs = aceItemCacheModel.supdocs;

        if ((supdocs != null) && (supdocs.length() == 0)) {
            aceItemCacheModel.supdocs = null;
        }

        aceItemCacheModel.admincomment = getAdmincomment();

        String admincomment = aceItemCacheModel.admincomment;

        if ((admincomment != null) && (admincomment.length() == 0)) {
            aceItemCacheModel.admincomment = null;
        }

        aceItemCacheModel.scenario = getScenario();

        String scenario = aceItemCacheModel.scenario;

        if ((scenario != null) && (scenario.length() == 0)) {
            aceItemCacheModel.scenario = null;
        }

        aceItemCacheModel.timeperiod = getTimeperiod();

        String timeperiod = aceItemCacheModel.timeperiod;

        if ((timeperiod != null) && (timeperiod.length() == 0)) {
            aceItemCacheModel.timeperiod = null;
        }

        Date lockdate = getLockdate();

        if (lockdate != null) {
            aceItemCacheModel.lockdate = lockdate.getTime();
        } else {
            aceItemCacheModel.lockdate = Long.MIN_VALUE;
        }

        return aceItemCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(85);

        sb.append("{aceItemId=");
        sb.append(getAceItemId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", wxsharvesterId=");
        sb.append(getWxsharvesterId());
        sb.append(", cswharvesterId=");
        sb.append(getCswharvesterId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", datatype=");
        sb.append(getDatatype());
        sb.append(", storedAt=");
        sb.append(getStoredAt());
        sb.append(", storagetype=");
        sb.append(getStoragetype());
        sb.append(", specialtagging=");
        sb.append(getSpecialtagging());
        sb.append(", textSearch=");
        sb.append(getTextSearch());
        sb.append(", keyword=");
        sb.append(getKeyword());
        sb.append(", targetresolution=");
        sb.append(getTargetresolution());
        sb.append(", spatialLayer=");
        sb.append(getSpatialLayer());
        sb.append(", spatialValues=");
        sb.append(getSpatialValues());
        sb.append(", startDate=");
        sb.append(getStartDate());
        sb.append(", endDate=");
        sb.append(getEndDate());
        sb.append(", publicationDate=");
        sb.append(getPublicationDate());
        sb.append(", sectors_=");
        sb.append(getSectors_());
        sb.append(", elements_=");
        sb.append(getElements_());
        sb.append(", climateimpacts_=");
        sb.append(getClimateimpacts_());
        sb.append(", rating=");
        sb.append(getRating());
        sb.append(", importance=");
        sb.append(getImportance());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", deeplink=");
        sb.append(getDeeplink());
        sb.append(", controlstatus=");
        sb.append(getControlstatus());
        sb.append(", creator=");
        sb.append(getCreator());
        sb.append(", creationdate=");
        sb.append(getCreationdate());
        sb.append(", moderator=");
        sb.append(getModerator());
        sb.append(", approvaldate=");
        sb.append(getApprovaldate());
        sb.append(", replacesId=");
        sb.append(getReplacesId());
        sb.append(", comments=");
        sb.append(getComments());
        sb.append(", textwebpage=");
        sb.append(getTextwebpage());
        sb.append(", year=");
        sb.append(getYear());
        sb.append(", geochars=");
        sb.append(getGeochars());
        sb.append(", feature=");
        sb.append(getFeature());
        sb.append(", supdocs=");
        sb.append(getSupdocs());
        sb.append(", admincomment=");
        sb.append(getAdmincomment());
        sb.append(", scenario=");
        sb.append(getScenario());
        sb.append(", timeperiod=");
        sb.append(getTimeperiod());
        sb.append(", lockdate=");
        sb.append(getLockdate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(130);

        sb.append("<model><model-name>");
        sb.append("nl.wur.alterra.cgi.ace.model.AceItem");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>aceItemId</column-name><column-value><![CDATA[");
        sb.append(getAceItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>wxsharvesterId</column-name><column-value><![CDATA[");
        sb.append(getWxsharvesterId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cswharvesterId</column-name><column-value><![CDATA[");
        sb.append(getCswharvesterId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>datatype</column-name><column-value><![CDATA[");
        sb.append(getDatatype());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>storedAt</column-name><column-value><![CDATA[");
        sb.append(getStoredAt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>storagetype</column-name><column-value><![CDATA[");
        sb.append(getStoragetype());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>specialtagging</column-name><column-value><![CDATA[");
        sb.append(getSpecialtagging());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>textSearch</column-name><column-value><![CDATA[");
        sb.append(getTextSearch());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>keyword</column-name><column-value><![CDATA[");
        sb.append(getKeyword());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>targetresolution</column-name><column-value><![CDATA[");
        sb.append(getTargetresolution());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>spatialLayer</column-name><column-value><![CDATA[");
        sb.append(getSpatialLayer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>spatialValues</column-name><column-value><![CDATA[");
        sb.append(getSpatialValues());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startDate</column-name><column-value><![CDATA[");
        sb.append(getStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>endDate</column-name><column-value><![CDATA[");
        sb.append(getEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>publicationDate</column-name><column-value><![CDATA[");
        sb.append(getPublicationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sectors_</column-name><column-value><![CDATA[");
        sb.append(getSectors_());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>elements_</column-name><column-value><![CDATA[");
        sb.append(getElements_());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>climateimpacts_</column-name><column-value><![CDATA[");
        sb.append(getClimateimpacts_());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rating</column-name><column-value><![CDATA[");
        sb.append(getRating());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>importance</column-name><column-value><![CDATA[");
        sb.append(getImportance());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deeplink</column-name><column-value><![CDATA[");
        sb.append(getDeeplink());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>controlstatus</column-name><column-value><![CDATA[");
        sb.append(getControlstatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creator</column-name><column-value><![CDATA[");
        sb.append(getCreator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creationdate</column-name><column-value><![CDATA[");
        sb.append(getCreationdate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>moderator</column-name><column-value><![CDATA[");
        sb.append(getModerator());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>approvaldate</column-name><column-value><![CDATA[");
        sb.append(getApprovaldate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>replacesId</column-name><column-value><![CDATA[");
        sb.append(getReplacesId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>comments</column-name><column-value><![CDATA[");
        sb.append(getComments());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>textwebpage</column-name><column-value><![CDATA[");
        sb.append(getTextwebpage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>year</column-name><column-value><![CDATA[");
        sb.append(getYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>geochars</column-name><column-value><![CDATA[");
        sb.append(getGeochars());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>feature</column-name><column-value><![CDATA[");
        sb.append(getFeature());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>supdocs</column-name><column-value><![CDATA[");
        sb.append(getSupdocs());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>admincomment</column-name><column-value><![CDATA[");
        sb.append(getAdmincomment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>scenario</column-name><column-value><![CDATA[");
        sb.append(getScenario());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>timeperiod</column-name><column-value><![CDATA[");
        sb.append(getTimeperiod());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lockdate</column-name><column-value><![CDATA[");
        sb.append(getLockdate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
